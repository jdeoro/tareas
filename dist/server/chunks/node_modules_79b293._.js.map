{
  "version": 3,
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["../../src/index.ts","/turbopack/[project]/node_modules/mysql2/node_modules/lru-cache/dist/cjs/index.js"],"sourcesContent":["/**\n * @module LRUCache\n */\n\n// module-private names and types\ntype Perf = { now: () => number }\nconst perf: Perf =\n  typeof performance === 'object' &&\n  performance &&\n  typeof performance.now === 'function'\n    ? performance\n    : Date\n\nconst warned = new Set<string>()\n\n// either a function or a class\ntype ForC = ((...a: any[]) => any) | { new (...a: any[]): any }\n\nconst emitWarning = (\n  msg: string,\n  type: string,\n  code: string,\n  fn: ForC\n) => {\n  typeof process === 'object' &&\n  process &&\n  typeof process.emitWarning === 'function'\n    ? process.emitWarning(msg, type, code, fn)\n    : console.error(`[${code}] ${type}: ${msg}`)\n}\n\nconst shouldWarn = (code: string) => !warned.has(code)\n\nconst TYPE = Symbol('type')\ntype PosInt = number & { [TYPE]: 'Positive Integer' }\ntype Index = number & { [TYPE]: 'LRUCache Index' }\n\nconst isPosInt = (n: any): n is PosInt =>\n  n && n === Math.floor(n) && n > 0 && isFinite(n)\n\ntype UintArray = Uint8Array | Uint16Array | Uint32Array\ntype NumberArray = UintArray | number[]\n\n/* c8 ignore start */\n// This is a little bit ridiculous, tbh.\n// The maximum array length is 2^32-1 or thereabouts on most JS impls.\n// And well before that point, you're caching the entire world, I mean,\n// that's ~32GB of just integers for the next/prev links, plus whatever\n// else to hold that many keys and values.  Just filling the memory with\n// zeroes at init time is brutal when you get that big.\n// But why not be complete?\n// Maybe in the future, these limits will have expanded.\nconst getUintArray = (max: number) =>\n  !isPosInt(max)\n    ? null\n    : max <= Math.pow(2, 8)\n    ? Uint8Array\n    : max <= Math.pow(2, 16)\n    ? Uint16Array\n    : max <= Math.pow(2, 32)\n    ? Uint32Array\n    : max <= Number.MAX_SAFE_INTEGER\n    ? ZeroArray\n    : null\n/* c8 ignore stop */\n\nclass ZeroArray extends Array<number> {\n  constructor(size: number) {\n    super(size)\n    this.fill(0)\n  }\n}\n\ntype StackLike = Stack | Index[]\nclass Stack {\n  heap: NumberArray\n  length: number\n  // private constructor\n  static #constructing: boolean = false\n  static create(max: number): StackLike {\n    const HeapCls = getUintArray(max)\n    if (!HeapCls) return []\n    Stack.#constructing = true\n    const s = new Stack(max, HeapCls)\n    Stack.#constructing = false\n    return s\n  }\n  constructor(\n    max: number,\n    HeapCls: { new (n: number): NumberArray }\n  ) {\n    /* c8 ignore start */\n    if (!Stack.#constructing) {\n      throw new TypeError('instantiate Stack using Stack.create(n)')\n    }\n    /* c8 ignore stop */\n    this.heap = new HeapCls(max)\n    this.length = 0\n  }\n  push(n: Index) {\n    this.heap[this.length++] = n\n  }\n  pop(): Index {\n    return this.heap[--this.length] as Index\n  }\n}\n\n/**\n * Promise representing an in-progress {@link LRUCache#fetch} call\n */\nexport type BackgroundFetch<V> = Promise<V | undefined | void> & {\n  __returned: BackgroundFetch<V> | undefined\n  __abortController: AbortController\n  __staleWhileFetching: V | undefined\n}\n\ntype DisposeTask<K, V> = [\n  value: V,\n  key: K,\n  reason: LRUCache.DisposeReason\n]\n\nexport namespace LRUCache {\n  /**\n   * An integer greater than 0, reflecting the calculated size of items\n   */\n  export type Size = number\n\n  /**\n   * Integer greater than 0, representing some number of milliseconds, or the\n   * time at which a TTL started counting from.\n   */\n  export type Milliseconds = number\n\n  /**\n   * An integer greater than 0, reflecting a number of items\n   */\n  export type Count = number\n\n  /**\n   * The reason why an item was removed from the cache, passed\n   * to the {@link Disposer} methods.\n   */\n  export type DisposeReason = 'evict' | 'set' | 'delete'\n  /**\n   * A method called upon item removal, passed as the\n   * {@link OptionsBase.dispose} and/or\n   * {@link OptionsBase.disposeAfter} options.\n   */\n  export type Disposer<K, V> = (\n    value: V,\n    key: K,\n    reason: DisposeReason\n  ) => void\n\n  /**\n   * A function that returns the effective calculated size\n   * of an entry in the cache.\n   */\n  export type SizeCalculator<K, V> = (value: V, key: K) => Size\n\n  /**\n   * Options provided to the\n   * {@link OptionsBase.fetchMethod} function.\n   */\n  export interface FetcherOptions<K, V, FC = unknown> {\n    signal: AbortSignal\n    options: FetcherFetchOptions<K, V, FC>\n    /**\n     * Object provided in the {@link FetchOptions.context} option to\n     * {@link LRUCache#fetch}\n     */\n    context: FC\n  }\n\n  /**\n   * Status object that may be passed to {@link LRUCache#fetch},\n   * {@link LRUCache#get}, {@link LRUCache#set}, and {@link LRUCache#has}.\n   */\n  export interface Status<V> {\n    /**\n     * The status of a set() operation.\n     *\n     * - add: the item was not found in the cache, and was added\n     * - update: the item was in the cache, with the same value provided\n     * - replace: the item was in the cache, and replaced\n     * - miss: the item was not added to the cache for some reason\n     */\n    set?: 'add' | 'update' | 'replace' | 'miss'\n\n    /**\n     * the ttl stored for the item, or undefined if ttls are not used.\n     */\n    ttl?: Milliseconds\n\n    /**\n     * the start time for the item, or undefined if ttls are not used.\n     */\n    start?: Milliseconds\n\n    /**\n     * The timestamp used for TTL calculation\n     */\n    now?: Milliseconds\n\n    /**\n     * the remaining ttl for the item, or undefined if ttls are not used.\n     */\n    remainingTTL?: Milliseconds\n\n    /**\n     * The calculated size for the item, if sizes are used.\n     */\n    entrySize?: Size\n\n    /**\n     * The total calculated size of the cache, if sizes are used.\n     */\n    totalCalculatedSize?: Size\n\n    /**\n     * A flag indicating that the item was not stored, due to exceeding the\n     * {@link OptionsBase.maxEntrySize}\n     */\n    maxEntrySizeExceeded?: true\n\n    /**\n     * The old value, specified in the case of `set:'update'` or\n     * `set:'replace'`\n     */\n    oldValue?: V\n\n    /**\n     * The results of a {@link LRUCache#has} operation\n     *\n     * - hit: the item was found in the cache\n     * - stale: the item was found in the cache, but is stale\n     * - miss: the item was not found in the cache\n     */\n    has?: 'hit' | 'stale' | 'miss'\n\n    /**\n     * The status of a {@link LRUCache#fetch} operation.\n     * Note that this can change as the underlying fetch() moves through\n     * various states.\n     *\n     * - inflight: there is another fetch() for this key which is in process\n     * - get: there is no fetchMethod, so {@link LRUCache#get} was called.\n     * - miss: the item is not in cache, and will be fetched.\n     * - hit: the item is in the cache, and was resolved immediately.\n     * - stale: the item is in the cache, but stale.\n     * - refresh: the item is in the cache, and not stale, but\n     *   {@link FetchOptions.forceRefresh} was specified.\n     */\n    fetch?: 'get' | 'inflight' | 'miss' | 'hit' | 'stale' | 'refresh'\n\n    /**\n     * The {@link OptionsBase.fetchMethod} was called\n     */\n    fetchDispatched?: true\n\n    /**\n     * The cached value was updated after a successful call to\n     * {@link OptionsBase.fetchMethod}\n     */\n    fetchUpdated?: true\n\n    /**\n     * The reason for a fetch() rejection.  Either the error raised by the\n     * {@link OptionsBase.fetchMethod}, or the reason for an\n     * AbortSignal.\n     */\n    fetchError?: Error\n\n    /**\n     * The fetch received an abort signal\n     */\n    fetchAborted?: true\n\n    /**\n     * The abort signal received was ignored, and the fetch was allowed to\n     * continue.\n     */\n    fetchAbortIgnored?: true\n\n    /**\n     * The fetchMethod promise resolved successfully\n     */\n    fetchResolved?: true\n\n    /**\n     * The fetchMethod promise was rejected\n     */\n    fetchRejected?: true\n\n    /**\n     * The status of a {@link LRUCache#get} operation.\n     *\n     * - fetching: The item is currently being fetched.  If a previous value\n     *   is present and allowed, that will be returned.\n     * - stale: The item is in the cache, and is stale.\n     * - hit: the item is in the cache\n     * - miss: the item is not in the cache\n     */\n    get?: 'stale' | 'hit' | 'miss'\n\n    /**\n     * A fetch or get operation returned a stale value.\n     */\n    returnedStale?: true\n  }\n\n  /**\n   * options which override the options set in the LRUCache constructor\n   * when calling {@link LRUCache#fetch}.\n   *\n   * This is the union of {@link GetOptions} and {@link SetOptions}, plus\n   * {@link OptionsBase.noDeleteOnFetchRejection},\n   * {@link OptionsBase.allowStaleOnFetchRejection},\n   * {@link FetchOptions.forceRefresh}, and\n   * {@link OptionsBase.context}\n   *\n   * Any of these may be modified in the {@link OptionsBase.fetchMethod}\n   * function, but the {@link GetOptions} fields will of course have no\n   * effect, as the {@link LRUCache#get} call already happened by the time\n   * the fetchMethod is called.\n   */\n  export interface FetcherFetchOptions<K, V, FC = unknown>\n    extends Pick<\n      OptionsBase<K, V, FC>,\n      | 'allowStale'\n      | 'updateAgeOnGet'\n      | 'noDeleteOnStaleGet'\n      | 'sizeCalculation'\n      | 'ttl'\n      | 'noDisposeOnSet'\n      | 'noUpdateTTL'\n      | 'noDeleteOnFetchRejection'\n      | 'allowStaleOnFetchRejection'\n      | 'ignoreFetchAbort'\n      | 'allowStaleOnFetchAbort'\n    > {\n    status?: Status<V>\n    size?: Size\n  }\n\n  /**\n   * Options that may be passed to the {@link LRUCache#fetch} method.\n   */\n  export interface FetchOptions<K, V, FC>\n    extends FetcherFetchOptions<K, V, FC> {\n    /**\n     * Set to true to force a re-load of the existing data, even if it\n     * is not yet stale.\n     */\n    forceRefresh?: boolean\n    /**\n     * Context provided to the {@link OptionsBase.fetchMethod} as\n     * the {@link FetcherOptions.context} param.\n     *\n     * If the FC type is specified as unknown (the default),\n     * undefined or void, then this is optional.  Otherwise, it will\n     * be required.\n     */\n    context?: FC\n    signal?: AbortSignal\n    status?: Status<V>\n  }\n  /**\n   * Options provided to {@link LRUCache#fetch} when the FC type is something\n   * other than `unknown`, `undefined`, or `void`\n   */\n  export interface FetchOptionsWithContext<K, V, FC>\n    extends FetchOptions<K, V, FC> {\n    context: FC\n  }\n  /**\n   * Options provided to {@link LRUCache#fetch} when the FC type is\n   * `undefined` or `void`\n   */\n  export interface FetchOptionsNoContext<K, V, FC>\n    extends FetchOptions<K, V, FC> {\n    context?: undefined\n  }\n\n  /**\n   * Options that may be passed to the {@link LRUCache#has} method.\n   */\n  export interface HasOptions<K, V, FC>\n    extends Pick<OptionsBase<K, V, FC>, 'updateAgeOnHas'> {\n    status?: Status<V>\n  }\n\n  /**\n   * Options that may be passed to the {@link LRUCache#get} method.\n   */\n  export interface GetOptions<K, V, FC>\n    extends Pick<\n      OptionsBase<K, V, FC>,\n      'allowStale' | 'updateAgeOnGet' | 'noDeleteOnStaleGet'\n    > {\n    status?: Status<V>\n  }\n\n  /**\n   * Options that may be passed to the {@link LRUCache#peek} method.\n   */\n  export interface PeekOptions<K, V, FC>\n    extends Pick<OptionsBase<K, V, FC>, 'allowStale'> {}\n\n  /**\n   * Options that may be passed to the {@link LRUCache#set} method.\n   */\n  export interface SetOptions<K, V, FC>\n    extends Pick<\n      OptionsBase<K, V, FC>,\n      'sizeCalculation' | 'ttl' | 'noDisposeOnSet' | 'noUpdateTTL'\n    > {\n    /**\n     * If size tracking is enabled, then setting an explicit size\n     * in the {@link LRUCache#set} call will prevent calling the\n     * {@link OptionsBase.sizeCalculation} function.\n     */\n    size?: Size\n    /**\n     * If TTL tracking is enabled, then setting an explicit start\n     * time in the {@link LRUCache#set} call will override the\n     * default time from `performance.now()` or `Date.now()`.\n     *\n     * Note that it must be a valid value for whichever time-tracking\n     * method is in use.\n     */\n    start?: Milliseconds\n    status?: Status<V>\n  }\n\n  /**\n   * The type signature for the {@link OptionsBase.fetchMethod} option.\n   */\n  export type Fetcher<K, V, FC = unknown> = (\n    key: K,\n    staleValue: V | undefined,\n    options: FetcherOptions<K, V, FC>\n  ) => Promise<V | void | undefined> | V | void | undefined\n\n  /**\n   * Options which may be passed to the {@link LRUCache} constructor.\n   *\n   * Most of these may be overridden in the various options that use\n   * them.\n   *\n   * Despite all being technically optional, the constructor requires that\n   * a cache is at minimum limited by one or more of {@link OptionsBase.max},\n   * {@link OptionsBase.ttl}, or {@link OptionsBase.maxSize}.\n   *\n   * If {@link OptionsBase.ttl} is used alone, then it is strongly advised\n   * (and in fact required by the type definitions here) that the cache\n   * also set {@link OptionsBase.ttlAutopurge}, to prevent potentially\n   * unbounded storage.\n   */\n  export interface OptionsBase<K, V, FC> {\n    /**\n     * The maximum number of items to store in the cache before evicting\n     * old entries. This is read-only on the {@link LRUCache} instance,\n     * and may not be overridden.\n     *\n     * If set, then storage space will be pre-allocated at construction\n     * time, and the cache will perform significantly faster.\n     *\n     * Note that significantly fewer items may be stored, if\n     * {@link OptionsBase.maxSize} and/or {@link OptionsBase.ttl} are also\n     * set.\n     */\n    max?: Count\n\n    /**\n     * Max time in milliseconds for items to live in cache before they are\n     * considered stale.  Note that stale items are NOT preemptively removed\n     * by default, and MAY live in the cache long after they have expired.\n     *\n     * Also, as this cache is optimized for LRU/MRU operations, some of\n     * the staleness/TTL checks will reduce performance, as they will incur\n     * overhead by deleting items.\n     *\n     * Must be an integer number of ms. If set to 0, this indicates \"no TTL\"\n     *\n     * @default 0\n     */\n    ttl?: Milliseconds\n\n    /**\n     * Minimum amount of time in ms in which to check for staleness.\n     * Defaults to 1, which means that the current time is checked\n     * at most once per millisecond.\n     *\n     * Set to 0 to check the current time every time staleness is tested.\n     * (This reduces performance, and is theoretically unnecessary.)\n     *\n     * Setting this to a higher value will improve performance somewhat\n     * while using ttl tracking, albeit at the expense of keeping stale\n     * items around a bit longer than their TTLs would indicate.\n     *\n     * @default 1\n     */\n    ttlResolution?: Milliseconds\n\n    /**\n     * Preemptively remove stale items from the cache.\n     * Note that this may significantly degrade performance,\n     * especially if the cache is storing a large number of items.\n     * It is almost always best to just leave the stale items in\n     * the cache, and let them fall out as new items are added.\n     *\n     * Note that this means that {@link OptionsBase.allowStale} is a bit\n     * pointless, as stale items will be deleted almost as soon as they\n     * expire.\n     *\n     * @default false\n     */\n    ttlAutopurge?: boolean\n\n    /**\n     * Update the age of items on {@link LRUCache#get}, renewing their TTL\n     *\n     * Has no effect if {@link OptionsBase.ttl} is not set.\n     *\n     * @default false\n     */\n    updateAgeOnGet?: boolean\n\n    /**\n     * Update the age of items on {@link LRUCache#has}, renewing their TTL\n     *\n     * Has no effect if {@link OptionsBase.ttl} is not set.\n     *\n     * @default false\n     */\n    updateAgeOnHas?: boolean\n\n    /**\n     * Allow {@link LRUCache#get} and {@link LRUCache#fetch} calls to return\n     * stale data, if available.\n     */\n    allowStale?: boolean\n\n    /**\n     * Function that is called on items when they are dropped from the cache.\n     * This can be handy if you want to close file descriptors or do other\n     * cleanup tasks when items are no longer accessible. Called with `key,\n     * value`.  It's called before actually removing the item from the\n     * internal cache, so it is *NOT* safe to re-add them.\n     *\n     * Use {@link OptionsBase.disposeAfter} if you wish to dispose items after\n     * they have been full removed, when it is safe to add them back to the\n     * cache.\n     */\n    dispose?: Disposer<K, V>\n\n    /**\n     * The same as {@link OptionsBase.dispose}, but called *after* the entry\n     * is completely removed and the cache is once again in a clean state.\n     * It is safe to add an item right back into the cache at this point.\n     * However, note that it is *very* easy to inadvertently create infinite\n     * recursion this way.\n     */\n    disposeAfter?: Disposer<K, V>\n\n    /**\n     * Set to true to suppress calling the\n     * {@link OptionsBase.dispose} function if the entry key is\n     * still accessible within the cache.\n     * This may be overridden by passing an options object to\n     * {@link LRUCache#set}.\n     */\n    noDisposeOnSet?: boolean\n\n    /**\n     * Boolean flag to tell the cache to not update the TTL when\n     * setting a new value for an existing key (ie, when updating a value\n     * rather than inserting a new value).  Note that the TTL value is\n     * _always_ set (if provided) when adding a new entry into the cache.\n     *\n     * Has no effect if a {@link OptionsBase.ttl} is not set.\n     */\n    noUpdateTTL?: boolean\n\n    /**\n     * If you wish to track item size, you must provide a maxSize\n     * note that we still will only keep up to max *actual items*,\n     * if max is set, so size tracking may cause fewer than max items\n     * to be stored.  At the extreme, a single item of maxSize size\n     * will cause everything else in the cache to be dropped when it\n     * is added.  Use with caution!\n     *\n     * Note also that size tracking can negatively impact performance,\n     * though for most cases, only minimally.\n     */\n    maxSize?: Size\n\n    /**\n     * The maximum allowed size for any single item in the cache.\n     *\n     * If a larger item is passed to {@link LRUCache#set} or returned by a\n     * {@link OptionsBase.fetchMethod}, then it will not be stored in the\n     * cache.\n     */\n    maxEntrySize?: Size\n\n    /**\n     * A function that returns a number indicating the item's size.\n     *\n     * If not provided, and {@link OptionsBase.maxSize} or\n     * {@link OptionsBase.maxEntrySize} are set, then all\n     * {@link LRUCache#set} calls **must** provide an explicit\n     * {@link SetOptions.size} or sizeCalculation param.\n     */\n    sizeCalculation?: SizeCalculator<K, V>\n\n    /**\n     * Method that provides the implementation for {@link LRUCache#fetch}\n     */\n    fetchMethod?: Fetcher<K, V, FC>\n\n    /**\n     * Set to true to suppress the deletion of stale data when a\n     * {@link OptionsBase.fetchMethod} returns a rejected promise.\n     */\n    noDeleteOnFetchRejection?: boolean\n\n    /**\n     * Do not delete stale items when they are retrieved with\n     * {@link LRUCache#get}.\n     *\n     * Note that the `get` return value will still be `undefined`\n     * unless {@link OptionsBase.allowStale} is true.\n     */\n    noDeleteOnStaleGet?: boolean\n\n    /**\n     * Set to true to allow returning stale data when a\n     * {@link OptionsBase.fetchMethod} throws an error or returns a rejected\n     * promise.\n     *\n     * This differs from using {@link OptionsBase.allowStale} in that stale\n     * data will ONLY be returned in the case that the\n     * {@link LRUCache#fetch} fails, not any other times.\n     */\n    allowStaleOnFetchRejection?: boolean\n\n    /**\n     * Set to true to return a stale value from the cache when the\n     * `AbortSignal` passed to the {@link OptionsBase.fetchMethod} dispatches an `'abort'`\n     * event, whether user-triggered, or due to internal cache behavior.\n     *\n     * Unless {@link OptionsBase.ignoreFetchAbort} is also set, the underlying\n     * {@link OptionsBase.fetchMethod} will still be considered canceled, and its return\n     * value will be ignored and not cached.\n     */\n    allowStaleOnFetchAbort?: boolean\n\n    /**\n     * Set to true to ignore the `abort` event emitted by the `AbortSignal`\n     * object passed to {@link OptionsBase.fetchMethod}, and still cache the\n     * resulting resolution value, as long as it is not `undefined`.\n     *\n     * When used on its own, this means aborted {@link LRUCache#fetch} calls are not\n     * immediately resolved or rejected when they are aborted, and instead\n     * take the full time to await.\n     *\n     * When used with {@link OptionsBase.allowStaleOnFetchAbort}, aborted\n     * {@link LRUCache#fetch} calls will resolve immediately to their stale\n     * cached value or `undefined`, and will continue to process and eventually\n     * update the cache when they resolve, as long as the resulting value is\n     * not `undefined`, thus supporting a \"return stale on timeout while\n     * refreshing\" mechanism by passing `AbortSignal.timeout(n)` as the signal.\n     *\n     * **Note**: regardless of this setting, an `abort` event _is still\n     * emitted on the `AbortSignal` object_, so may result in invalid results\n     * when passed to other underlying APIs that use AbortSignals.\n     *\n     * This may be overridden in the {@link OptionsBase.fetchMethod} or the\n     * call to {@link LRUCache#fetch}.\n     */\n    ignoreFetchAbort?: boolean\n  }\n\n  export interface OptionsMaxLimit<K, V, FC>\n    extends OptionsBase<K, V, FC> {\n    max: Count\n  }\n  export interface OptionsTTLLimit<K, V, FC>\n    extends OptionsBase<K, V, FC> {\n    ttl: Milliseconds\n    ttlAutopurge: boolean\n  }\n  export interface OptionsSizeLimit<K, V, FC>\n    extends OptionsBase<K, V, FC> {\n    maxSize: Size\n  }\n\n  /**\n   * The valid safe options for the {@link LRUCache} constructor\n   */\n  export type Options<K, V, FC> =\n    | OptionsMaxLimit<K, V, FC>\n    | OptionsSizeLimit<K, V, FC>\n    | OptionsTTLLimit<K, V, FC>\n\n  /**\n   * Entry objects used by {@link LRUCache#load} and {@link LRUCache#dump}\n   */\n  export interface Entry<V> {\n    value: V\n    ttl?: Milliseconds\n    size?: Size\n    start?: Milliseconds\n  }\n}\n\n/**\n * Default export, the thing you're using this module to get.\n *\n * All properties from the options object (with the exception of\n * {@link OptionsBase.max} and {@link OptionsBase.maxSize}) are added as\n * normal public members. (`max` and `maxBase` are read-only getters.)\n * Changing any of these will alter the defaults for subsequent method calls,\n * but is otherwise safe.\n */\nexport class LRUCache<K extends {}, V extends {}, FC = unknown> {\n  // properties coming in from the options of these, only max and maxSize\n  // really *need* to be protected. The rest can be modified, as they just\n  // set defaults for various methods.\n  readonly #max: LRUCache.Count\n  readonly #maxSize: LRUCache.Size\n  readonly #dispose?: LRUCache.Disposer<K, V>\n  readonly #disposeAfter?: LRUCache.Disposer<K, V>\n  readonly #fetchMethod?: LRUCache.Fetcher<K, V, FC>\n\n  /**\n   * {@link LRUCache.OptionsBase.ttl}\n   */\n  ttl: LRUCache.Milliseconds\n\n  /**\n   * {@link LRUCache.OptionsBase.ttlResolution}\n   */\n  ttlResolution: LRUCache.Milliseconds\n  /**\n   * {@link LRUCache.OptionsBase.ttlAutopurge}\n   */\n  ttlAutopurge: boolean\n  /**\n   * {@link LRUCache.OptionsBase.updateAgeOnGet}\n   */\n  updateAgeOnGet: boolean\n  /**\n   * {@link LRUCache.OptionsBase.updateAgeOnHas}\n   */\n  updateAgeOnHas: boolean\n  /**\n   * {@link LRUCache.OptionsBase.allowStale}\n   */\n  allowStale: boolean\n\n  /**\n   * {@link LRUCache.OptionsBase.noDisposeOnSet}\n   */\n  noDisposeOnSet: boolean\n  /**\n   * {@link LRUCache.OptionsBase.noUpdateTTL}\n   */\n  noUpdateTTL: boolean\n  /**\n   * {@link LRUCache.OptionsBase.maxEntrySize}\n   */\n  maxEntrySize: LRUCache.Size\n  /**\n   * {@link LRUCache.OptionsBase.sizeCalculation}\n   */\n  sizeCalculation?: LRUCache.SizeCalculator<K, V>\n  /**\n   * {@link LRUCache.OptionsBase.noDeleteOnFetchRejection}\n   */\n  noDeleteOnFetchRejection: boolean\n  /**\n   * {@link LRUCache.OptionsBase.noDeleteOnStaleGet}\n   */\n  noDeleteOnStaleGet: boolean\n  /**\n   * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort}\n   */\n  allowStaleOnFetchAbort: boolean\n  /**\n   * {@link LRUCache.OptionsBase.allowStaleOnFetchRejection}\n   */\n  allowStaleOnFetchRejection: boolean\n  /**\n   * {@link LRUCache.OptionsBase.ignoreFetchAbort}\n   */\n  ignoreFetchAbort: boolean\n\n  // computed properties\n  #size: LRUCache.Count\n  #calculatedSize: LRUCache.Size\n  #keyMap: Map<K, Index>\n  #keyList: (K | undefined)[]\n  #valList: (V | BackgroundFetch<V> | undefined)[]\n  #next: NumberArray\n  #prev: NumberArray\n  #head: Index\n  #tail: Index\n  #free: StackLike\n  #disposed?: DisposeTask<K, V>[]\n  #sizes?: ZeroArray\n  #starts?: ZeroArray\n  #ttls?: ZeroArray\n\n  #hasDispose: boolean\n  #hasFetchMethod: boolean\n  #hasDisposeAfter: boolean\n\n  /**\n   * Do not call this method unless you need to inspect the\n   * inner workings of the cache.  If anything returned by this\n   * object is modified in any way, strange breakage may occur.\n   *\n   * These fields are private for a reason!\n   *\n   * @internal\n   */\n  static unsafeExposeInternals<\n    K extends {},\n    V extends {},\n    FC extends unknown = unknown\n  >(c: LRUCache<K, V, FC>) {\n    return {\n      // properties\n      starts: c.#starts,\n      ttls: c.#ttls,\n      sizes: c.#sizes,\n      keyMap: c.#keyMap as Map<K, number>,\n      keyList: c.#keyList,\n      valList: c.#valList,\n      next: c.#next,\n      prev: c.#prev,\n      get head() {\n        return c.#head\n      },\n      get tail() {\n        return c.#tail\n      },\n      free: c.#free,\n      // methods\n      isBackgroundFetch: (p: any) => c.#isBackgroundFetch(p),\n      backgroundFetch: (\n        k: K,\n        index: number | undefined,\n        options: LRUCache.FetchOptions<K, V, FC>,\n        context: any\n      ): BackgroundFetch<V> =>\n        c.#backgroundFetch(\n          k,\n          index as Index | undefined,\n          options,\n          context\n        ),\n      moveToTail: (index: number): void =>\n        c.#moveToTail(index as Index),\n      indexes: (options?: { allowStale: boolean }) =>\n        c.#indexes(options),\n      rindexes: (options?: { allowStale: boolean }) =>\n        c.#rindexes(options),\n      isStale: (index: number | undefined) =>\n        c.#isStale(index as Index),\n    }\n  }\n\n  // Protected read-only members\n\n  /**\n   * {@link LRUCache.OptionsBase.max} (read-only)\n   */\n  get max(): LRUCache.Count {\n    return this.#max\n  }\n  /**\n   * {@link LRUCache.OptionsBase.maxSize} (read-only)\n   */\n  get maxSize(): LRUCache.Count {\n    return this.#maxSize\n  }\n  /**\n   * The total computed size of items in the cache (read-only)\n   */\n  get calculatedSize(): LRUCache.Size {\n    return this.#calculatedSize\n  }\n  /**\n   * The number of items stored in the cache (read-only)\n   */\n  get size(): LRUCache.Count {\n    return this.#size\n  }\n  /**\n   * {@link LRUCache.OptionsBase.fetchMethod} (read-only)\n   */\n  get fetchMethod(): LRUCache.Fetcher<K, V, FC> | undefined {\n    return this.#fetchMethod\n  }\n  /**\n   * {@link LRUCache.OptionsBase.dispose} (read-only)\n   */\n  get dispose() {\n    return this.#dispose\n  }\n  /**\n   * {@link LRUCache.OptionsBase.disposeAfter} (read-only)\n   */\n  get disposeAfter() {\n    return this.#disposeAfter\n  }\n\n  constructor(\n    options: LRUCache.Options<K, V, FC> | LRUCache<K, V, FC>\n  ) {\n    const {\n      max = 0,\n      ttl,\n      ttlResolution = 1,\n      ttlAutopurge,\n      updateAgeOnGet,\n      updateAgeOnHas,\n      allowStale,\n      dispose,\n      disposeAfter,\n      noDisposeOnSet,\n      noUpdateTTL,\n      maxSize = 0,\n      maxEntrySize = 0,\n      sizeCalculation,\n      fetchMethod,\n      noDeleteOnFetchRejection,\n      noDeleteOnStaleGet,\n      allowStaleOnFetchRejection,\n      allowStaleOnFetchAbort,\n      ignoreFetchAbort,\n    } = options\n\n    if (max !== 0 && !isPosInt(max)) {\n      throw new TypeError('max option must be a nonnegative integer')\n    }\n\n    const UintArray = max ? getUintArray(max) : Array\n    if (!UintArray) {\n      throw new Error('invalid max value: ' + max)\n    }\n\n    this.#max = max\n    this.#maxSize = maxSize\n    this.maxEntrySize = maxEntrySize || this.#maxSize\n    this.sizeCalculation = sizeCalculation\n    if (this.sizeCalculation) {\n      if (!this.#maxSize && !this.maxEntrySize) {\n        throw new TypeError(\n          'cannot set sizeCalculation without setting maxSize or maxEntrySize'\n        )\n      }\n      if (typeof this.sizeCalculation !== 'function') {\n        throw new TypeError('sizeCalculation set to non-function')\n      }\n    }\n\n    if (\n      fetchMethod !== undefined &&\n      typeof fetchMethod !== 'function'\n    ) {\n      throw new TypeError(\n        'fetchMethod must be a function if specified'\n      )\n    }\n    this.#fetchMethod = fetchMethod\n    this.#hasFetchMethod = !!fetchMethod\n\n    this.#keyMap = new Map()\n    this.#keyList = new Array(max).fill(undefined)\n    this.#valList = new Array(max).fill(undefined)\n    this.#next = new UintArray(max)\n    this.#prev = new UintArray(max)\n    this.#head = 0 as Index\n    this.#tail = 0 as Index\n    this.#free = Stack.create(max)\n    this.#size = 0\n    this.#calculatedSize = 0\n\n    if (typeof dispose === 'function') {\n      this.#dispose = dispose\n    }\n    if (typeof disposeAfter === 'function') {\n      this.#disposeAfter = disposeAfter\n      this.#disposed = []\n    } else {\n      this.#disposeAfter = undefined\n      this.#disposed = undefined\n    }\n    this.#hasDispose = !!this.#dispose\n    this.#hasDisposeAfter = !!this.#disposeAfter\n\n    this.noDisposeOnSet = !!noDisposeOnSet\n    this.noUpdateTTL = !!noUpdateTTL\n    this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection\n    this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection\n    this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort\n    this.ignoreFetchAbort = !!ignoreFetchAbort\n\n    // NB: maxEntrySize is set to maxSize if it's set\n    if (this.maxEntrySize !== 0) {\n      if (this.#maxSize !== 0) {\n        if (!isPosInt(this.#maxSize)) {\n          throw new TypeError(\n            'maxSize must be a positive integer if specified'\n          )\n        }\n      }\n      if (!isPosInt(this.maxEntrySize)) {\n        throw new TypeError(\n          'maxEntrySize must be a positive integer if specified'\n        )\n      }\n      this.#initializeSizeTracking()\n    }\n\n    this.allowStale = !!allowStale\n    this.noDeleteOnStaleGet = !!noDeleteOnStaleGet\n    this.updateAgeOnGet = !!updateAgeOnGet\n    this.updateAgeOnHas = !!updateAgeOnHas\n    this.ttlResolution =\n      isPosInt(ttlResolution) || ttlResolution === 0\n        ? ttlResolution\n        : 1\n    this.ttlAutopurge = !!ttlAutopurge\n    this.ttl = ttl || 0\n    if (this.ttl) {\n      if (!isPosInt(this.ttl)) {\n        throw new TypeError(\n          'ttl must be a positive integer if specified'\n        )\n      }\n      this.#initializeTTLTracking()\n    }\n\n    // do not allow completely unbounded caches\n    if (this.#max === 0 && this.ttl === 0 && this.#maxSize === 0) {\n      throw new TypeError(\n        'At least one of max, maxSize, or ttl is required'\n      )\n    }\n    if (!this.ttlAutopurge && !this.#max && !this.#maxSize) {\n      const code = 'LRU_CACHE_UNBOUNDED'\n      if (shouldWarn(code)) {\n        warned.add(code)\n        const msg =\n          'TTL caching without ttlAutopurge, max, or maxSize can ' +\n          'result in unbounded memory consumption.'\n        emitWarning(msg, 'UnboundedCacheWarning', code, LRUCache)\n      }\n    }\n  }\n\n  /**\n   * Return the remaining TTL time for a given entry key\n   */\n  getRemainingTTL(key: K) {\n    return this.#keyMap.has(key) ? Infinity : 0\n  }\n\n  #initializeTTLTracking() {\n    const ttls = new ZeroArray(this.#max)\n    const starts = new ZeroArray(this.#max)\n    this.#ttls = ttls\n    this.#starts = starts\n\n    this.#setItemTTL = (index, ttl, start = perf.now()) => {\n      starts[index] = ttl !== 0 ? start : 0\n      ttls[index] = ttl\n      if (ttl !== 0 && this.ttlAutopurge) {\n        const t = setTimeout(() => {\n          if (this.#isStale(index)) {\n            this.delete(this.#keyList[index] as K)\n          }\n        }, ttl + 1)\n        // unref() not supported on all platforms\n        /* c8 ignore start */\n        if (t.unref) {\n          t.unref()\n        }\n        /* c8 ignore stop */\n      }\n    }\n\n    this.#updateItemAge = index => {\n      starts[index] = ttls[index] !== 0 ? perf.now() : 0\n    }\n\n    this.#statusTTL = (status, index) => {\n      if (ttls[index]) {\n        const ttl = ttls[index]\n        const start = starts[index]\n        status.ttl = ttl\n        status.start = start\n        status.now = cachedNow || getNow()\n        status.remainingTTL = status.now + ttl - start\n      }\n    }\n\n    // debounce calls to perf.now() to 1s so we're not hitting\n    // that costly call repeatedly.\n    let cachedNow = 0\n    const getNow = () => {\n      const n = perf.now()\n      if (this.ttlResolution > 0) {\n        cachedNow = n\n        const t = setTimeout(\n          () => (cachedNow = 0),\n          this.ttlResolution\n        )\n        // not available on all platforms\n        /* c8 ignore start */\n        if (t.unref) {\n          t.unref()\n        }\n        /* c8 ignore stop */\n      }\n      return n\n    }\n\n    this.getRemainingTTL = key => {\n      const index = this.#keyMap.get(key)\n      if (index === undefined) {\n        return 0\n      }\n      return ttls[index] === 0 || starts[index] === 0\n        ? Infinity\n        : starts[index] + ttls[index] - (cachedNow || getNow())\n    }\n\n    this.#isStale = index => {\n      return (\n        ttls[index] !== 0 &&\n        starts[index] !== 0 &&\n        (cachedNow || getNow()) - starts[index] > ttls[index]\n      )\n    }\n  }\n\n  // conditionally set private methods related to TTL\n  #updateItemAge: (index: Index) => void = () => {}\n  #statusTTL: (status: LRUCache.Status<V>, index: Index) => void =\n    () => {}\n  #setItemTTL: (\n    index: Index,\n    ttl: LRUCache.Milliseconds,\n    start?: LRUCache.Milliseconds\n    // ignore because we never call this if we're not already in TTL mode\n    /* c8 ignore start */\n  ) => void = () => {}\n  /* c8 ignore stop */\n\n  #isStale: (index: Index) => boolean = () => false\n\n  #initializeSizeTracking() {\n    const sizes = new ZeroArray(this.#max)\n    this.#calculatedSize = 0\n    this.#sizes = sizes\n    this.#removeItemSize = index => {\n      this.#calculatedSize -= sizes[index]\n      sizes[index] = 0\n    }\n    this.#requireSize = (k, v, size, sizeCalculation) => {\n      // provisionally accept background fetches.\n      // actual value size will be checked when they return.\n      if (this.#isBackgroundFetch(v)) {\n        return 0\n      }\n      if (!isPosInt(size)) {\n        if (sizeCalculation) {\n          if (typeof sizeCalculation !== 'function') {\n            throw new TypeError('sizeCalculation must be a function')\n          }\n          size = sizeCalculation(v, k)\n          if (!isPosInt(size)) {\n            throw new TypeError(\n              'sizeCalculation return invalid (expect positive integer)'\n            )\n          }\n        } else {\n          throw new TypeError(\n            'invalid size value (must be positive integer). ' +\n              'When maxSize or maxEntrySize is used, sizeCalculation ' +\n              'or size must be set.'\n          )\n        }\n      }\n      return size\n    }\n    this.#addItemSize = (\n      index: Index,\n      size: LRUCache.Size,\n      status?: LRUCache.Status<V>\n    ) => {\n      sizes[index] = size\n      if (this.#maxSize) {\n        const maxSize = this.#maxSize - sizes[index]\n        while (this.#calculatedSize > maxSize) {\n          this.#evict(true)\n        }\n      }\n      this.#calculatedSize += sizes[index]\n      if (status) {\n        status.entrySize = size\n        status.totalCalculatedSize = this.#calculatedSize\n      }\n    }\n  }\n\n  #removeItemSize: (index: Index) => void = _i => {}\n  #addItemSize: (\n    index: Index,\n    size: LRUCache.Size,\n    status?: LRUCache.Status<V>\n  ) => void = (_i, _s, _st) => {}\n  #requireSize: (\n    k: K,\n    v: V | BackgroundFetch<V>,\n    size?: LRUCache.Size,\n    sizeCalculation?: LRUCache.SizeCalculator<K, V>\n  ) => LRUCache.Size = (\n    _k: K,\n    _v: V | BackgroundFetch<V>,\n    size?: LRUCache.Size,\n    sizeCalculation?: LRUCache.SizeCalculator<K, V>\n  ) => {\n    if (size || sizeCalculation) {\n      throw new TypeError(\n        'cannot set size without setting maxSize or maxEntrySize on cache'\n      )\n    }\n    return 0\n  };\n\n  *#indexes({ allowStale = this.allowStale } = {}) {\n    if (this.#size) {\n      for (let i = this.#tail; true; ) {\n        if (!this.#isValidIndex(i)) {\n          break\n        }\n        if (allowStale || !this.#isStale(i)) {\n          yield i\n        }\n        if (i === this.#head) {\n          break\n        } else {\n          i = this.#prev[i] as Index\n        }\n      }\n    }\n  }\n\n  *#rindexes({ allowStale = this.allowStale } = {}) {\n    if (this.#size) {\n      for (let i = this.#head; true; ) {\n        if (!this.#isValidIndex(i)) {\n          break\n        }\n        if (allowStale || !this.#isStale(i)) {\n          yield i\n        }\n        if (i === this.#tail) {\n          break\n        } else {\n          i = this.#next[i] as Index\n        }\n      }\n    }\n  }\n\n  #isValidIndex(index: Index) {\n    return (\n      index !== undefined &&\n      this.#keyMap.get(this.#keyList[index] as K) === index\n    )\n  }\n\n  /**\n   * Return a generator yielding `[key, value]` pairs,\n   * in order from most recently used to least recently used.\n   */\n  *entries() {\n    for (const i of this.#indexes()) {\n      if (\n        this.#valList[i] !== undefined &&\n        this.#keyList[i] !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield [this.#keyList[i], this.#valList[i]]\n      }\n    }\n  }\n\n  /**\n   * Inverse order version of {@link LRUCache.entries}\n   *\n   * Return a generator yielding `[key, value]` pairs,\n   * in order from least recently used to most recently used.\n   */\n  *rentries() {\n    for (const i of this.#rindexes()) {\n      if (\n        this.#valList[i] !== undefined &&\n        this.#keyList[i] !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield [this.#keyList[i], this.#valList[i]]\n      }\n    }\n  }\n\n  /**\n   * Return a generator yielding the keys in the cache,\n   * in order from most recently used to least recently used.\n   */\n  *keys() {\n    for (const i of this.#indexes()) {\n      const k = this.#keyList[i]\n      if (\n        k !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield k\n      }\n    }\n  }\n\n  /**\n   * Inverse order version of {@link LRUCache.keys}\n   *\n   * Return a generator yielding the keys in the cache,\n   * in order from least recently used to most recently used.\n   */\n  *rkeys() {\n    for (const i of this.#rindexes()) {\n      const k = this.#keyList[i]\n      if (\n        k !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield k\n      }\n    }\n  }\n\n  /**\n   * Return a generator yielding the values in the cache,\n   * in order from most recently used to least recently used.\n   */\n  *values() {\n    for (const i of this.#indexes()) {\n      const v = this.#valList[i]\n      if (\n        v !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield this.#valList[i]\n      }\n    }\n  }\n\n  /**\n   * Inverse order version of {@link LRUCache.values}\n   *\n   * Return a generator yielding the values in the cache,\n   * in order from least recently used to most recently used.\n   */\n  *rvalues() {\n    for (const i of this.#rindexes()) {\n      const v = this.#valList[i]\n      if (\n        v !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield this.#valList[i]\n      }\n    }\n  }\n\n  /**\n   * Iterating over the cache itself yields the same results as\n   * {@link LRUCache.entries}\n   */\n  [Symbol.iterator]() {\n    return this.entries()\n  }\n\n  /**\n   * Find a value for which the supplied fn method returns a truthy value,\n   * similar to Array.find().  fn is called as fn(value, key, cache).\n   */\n  find(\n    fn: (v: V, k: K, self: LRUCache<K, V, FC>) => boolean,\n    getOptions: LRUCache.GetOptions<K, V, FC> = {}\n  ) {\n    for (const i of this.#indexes()) {\n      const v = this.#valList[i]\n      const value = this.#isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined) continue\n      if (fn(value, this.#keyList[i] as K, this)) {\n        return this.get(this.#keyList[i] as K, getOptions)\n      }\n    }\n  }\n\n  /**\n   * Call the supplied function on each item in the cache, in order from\n   * most recently used to least recently used.  fn is called as\n   * fn(value, key, cache).  Does not update age or recenty of use.\n   * Does not iterate over stale values.\n   */\n  forEach(\n    fn: (v: V, k: K, self: LRUCache<K, V, FC>) => any,\n    thisp: any = this\n  ) {\n    for (const i of this.#indexes()) {\n      const v = this.#valList[i]\n      const value = this.#isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined) continue\n      fn.call(thisp, value, this.#keyList[i] as K, this)\n    }\n  }\n\n  /**\n   * The same as {@link LRUCache.forEach} but items are iterated over in\n   * reverse order.  (ie, less recently used items are iterated over first.)\n   */\n  rforEach(\n    fn: (v: V, k: K, self: LRUCache<K, V, FC>) => any,\n    thisp: any = this\n  ) {\n    for (const i of this.#rindexes()) {\n      const v = this.#valList[i]\n      const value = this.#isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined) continue\n      fn.call(thisp, value, this.#keyList[i] as K, this)\n    }\n  }\n\n  /**\n   * Delete any stale entries. Returns true if anything was removed,\n   * false otherwise.\n   */\n  purgeStale() {\n    let deleted = false\n    for (const i of this.#rindexes({ allowStale: true })) {\n      if (this.#isStale(i)) {\n        this.delete(this.#keyList[i] as K)\n        deleted = true\n      }\n    }\n    return deleted\n  }\n\n  /**\n   * Return an array of [key, {@link LRUCache.Entry}] tuples which can be\n   * passed to cache.load()\n   */\n  dump() {\n    const arr: [K, LRUCache.Entry<V>][] = []\n    for (const i of this.#indexes({ allowStale: true })) {\n      const key = this.#keyList[i]\n      const v = this.#valList[i]\n      const value: V | undefined = this.#isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined || key === undefined) continue\n      const entry: LRUCache.Entry<V> = { value }\n      if (this.#ttls && this.#starts) {\n        entry.ttl = this.#ttls[i]\n        // always dump the start relative to a portable timestamp\n        // it's ok for this to be a bit slow, it's a rare operation.\n        const age = perf.now() - this.#starts[i]\n        entry.start = Math.floor(Date.now() - age)\n      }\n      if (this.#sizes) {\n        entry.size = this.#sizes[i]\n      }\n      arr.unshift([key, entry])\n    }\n    return arr\n  }\n\n  /**\n   * Reset the cache and load in the items in entries in the order listed.\n   * Note that the shape of the resulting cache may be different if the\n   * same options are not used in both caches.\n   */\n  load(arr: [K, LRUCache.Entry<V>][]) {\n    this.clear()\n    for (const [key, entry] of arr) {\n      if (entry.start) {\n        // entry.start is a portable timestamp, but we may be using\n        // node's performance.now(), so calculate the offset, so that\n        // we get the intended remaining TTL, no matter how long it's\n        // been on ice.\n        //\n        // it's ok for this to be a bit slow, it's a rare operation.\n        const age = Date.now() - entry.start\n        entry.start = perf.now() - age\n      }\n      this.set(key, entry.value, entry)\n    }\n  }\n\n  /**\n   * Add a value to the cache.\n   */\n  set(\n    k: K,\n    v: V | BackgroundFetch<V>,\n    setOptions: LRUCache.SetOptions<K, V, FC> = {}\n  ) {\n    const {\n      ttl = this.ttl,\n      start,\n      noDisposeOnSet = this.noDisposeOnSet,\n      sizeCalculation = this.sizeCalculation,\n      status,\n    } = setOptions\n    let { noUpdateTTL = this.noUpdateTTL } = setOptions\n\n    const size = this.#requireSize(\n      k,\n      v,\n      setOptions.size || 0,\n      sizeCalculation\n    )\n    // if the item doesn't fit, don't do anything\n    // NB: maxEntrySize set to maxSize by default\n    if (this.maxEntrySize && size > this.maxEntrySize) {\n      if (status) {\n        status.set = 'miss'\n        status.maxEntrySizeExceeded = true\n      }\n      // have to delete, in case something is there already.\n      this.delete(k)\n      return this\n    }\n    let index = this.#size === 0 ? undefined : this.#keyMap.get(k)\n    if (index === undefined) {\n      // addition\n      index = (\n        this.#size === 0\n          ? this.#tail\n          : this.#free.length !== 0\n          ? this.#free.pop()\n          : this.#size === this.#max\n          ? this.#evict(false)\n          : this.#size\n      ) as Index\n      this.#keyList[index] = k\n      this.#valList[index] = v\n      this.#keyMap.set(k, index)\n      this.#next[this.#tail] = index\n      this.#prev[index] = this.#tail\n      this.#tail = index\n      this.#size++\n      this.#addItemSize(index, size, status)\n      if (status) status.set = 'add'\n      noUpdateTTL = false\n    } else {\n      // update\n      this.#moveToTail(index)\n      const oldVal = this.#valList[index] as V | BackgroundFetch<V>\n      if (v !== oldVal) {\n        if (this.#hasFetchMethod && this.#isBackgroundFetch(oldVal)) {\n          oldVal.__abortController.abort(new Error('replaced'))\n        } else if (!noDisposeOnSet) {\n          if (this.#hasDispose) {\n            this.#dispose?.(oldVal as V, k, 'set')\n          }\n          if (this.#hasDisposeAfter) {\n            this.#disposed?.push([oldVal as V, k, 'set'])\n          }\n        }\n        this.#removeItemSize(index)\n        this.#addItemSize(index, size, status)\n        this.#valList[index] = v\n        if (status) {\n          status.set = 'replace'\n          const oldValue =\n            oldVal && this.#isBackgroundFetch(oldVal)\n              ? oldVal.__staleWhileFetching\n              : oldVal\n          if (oldValue !== undefined) status.oldValue = oldValue\n        }\n      } else if (status) {\n        status.set = 'update'\n      }\n    }\n    if (ttl !== 0 && !this.#ttls) {\n      this.#initializeTTLTracking()\n    }\n    if (this.#ttls) {\n      if (!noUpdateTTL) {\n        this.#setItemTTL(index, ttl, start)\n      }\n      if (status) this.#statusTTL(status, index)\n    }\n    if (!noDisposeOnSet && this.#hasDisposeAfter && this.#disposed) {\n      const dt = this.#disposed\n      let task: DisposeTask<K, V> | undefined\n      while ((task = dt?.shift())) {\n        this.#disposeAfter?.(...task)\n      }\n    }\n    return this\n  }\n\n  /**\n   * Evict the least recently used item, returning its value or\n   * `undefined` if cache is empty.\n   */\n  pop(): V | undefined {\n    try {\n      while (this.#size) {\n        const val = this.#valList[this.#head]\n        this.#evict(true)\n        if (this.#isBackgroundFetch(val)) {\n          if (val.__staleWhileFetching) {\n            return val.__staleWhileFetching\n          }\n        } else if (val !== undefined) {\n          return val\n        }\n      }\n    } finally {\n      if (this.#hasDisposeAfter && this.#disposed) {\n        const dt = this.#disposed\n        let task: DisposeTask<K, V> | undefined\n        while ((task = dt?.shift())) {\n          this.#disposeAfter?.(...task)\n        }\n      }\n    }\n  }\n\n  #evict(free: boolean) {\n    const head = this.#head\n    const k = this.#keyList[head] as K\n    const v = this.#valList[head] as V\n    if (this.#hasFetchMethod && this.#isBackgroundFetch(v)) {\n      v.__abortController.abort(new Error('evicted'))\n    } else if (this.#hasDispose || this.#hasDisposeAfter) {\n      if (this.#hasDispose) {\n        this.#dispose?.(v, k, 'evict')\n      }\n      if (this.#hasDisposeAfter) {\n        this.#disposed?.push([v, k, 'evict'])\n      }\n    }\n    this.#removeItemSize(head)\n    // if we aren't about to use the index, then null these out\n    if (free) {\n      this.#keyList[head] = undefined\n      this.#valList[head] = undefined\n      this.#free.push(head)\n    }\n    if (this.#size === 1) {\n      this.#head = this.#tail = 0 as Index\n      this.#free.length = 0\n    } else {\n      this.#head = this.#next[head] as Index\n    }\n    this.#keyMap.delete(k)\n    this.#size--\n    return head\n  }\n\n  /**\n   * Check if a key is in the cache, without updating the recency of use.\n   * Will return false if the item is stale, even though it is technically\n   * in the cache.\n   *\n   * Will not update item age unless\n   * {@link LRUCache.OptionsBase.updateAgeOnHas} is set.\n   */\n  has(k: K, hasOptions: LRUCache.HasOptions<K, V, FC> = {}) {\n    const { updateAgeOnHas = this.updateAgeOnHas, status } =\n      hasOptions\n    const index = this.#keyMap.get(k)\n    if (index !== undefined) {\n      const v = this.#valList[index]\n      if (\n        this.#isBackgroundFetch(v) &&\n        v.__staleWhileFetching === undefined\n      ) {\n        return false\n      }\n      if (!this.#isStale(index)) {\n        if (updateAgeOnHas) {\n          this.#updateItemAge(index)\n        }\n        if (status) {\n          status.has = 'hit'\n          this.#statusTTL(status, index)\n        }\n        return true\n      } else if (status) {\n        status.has = 'stale'\n        this.#statusTTL(status, index)\n      }\n    } else if (status) {\n      status.has = 'miss'\n    }\n    return false\n  }\n\n  /**\n   * Like {@link LRUCache#get} but doesn't update recency or delete stale\n   * items.\n   *\n   * Returns `undefined` if the item is stale, unless\n   * {@link LRUCache.OptionsBase.allowStale} is set.\n   */\n  peek(k: K, peekOptions: LRUCache.PeekOptions<K, V, FC> = {}) {\n    const { allowStale = this.allowStale } = peekOptions\n    const index = this.#keyMap.get(k)\n    if (\n      index !== undefined &&\n      (allowStale || !this.#isStale(index))\n    ) {\n      const v = this.#valList[index]\n      // either stale and allowed, or forcing a refresh of non-stale value\n      return this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v\n    }\n  }\n\n  #backgroundFetch(\n    k: K,\n    index: Index | undefined,\n    options: LRUCache.FetchOptions<K, V, FC>,\n    context: any\n  ): BackgroundFetch<V> {\n    const v = index === undefined ? undefined : this.#valList[index]\n    if (this.#isBackgroundFetch(v)) {\n      return v\n    }\n\n    const ac = new AbortController()\n    const { signal } = options\n    // when/if our AC signals, then stop listening to theirs.\n    signal?.addEventListener('abort', () => ac.abort(signal.reason), {\n      signal: ac.signal,\n    })\n\n    const fetchOpts = {\n      signal: ac.signal,\n      options,\n      context,\n    }\n\n    const cb = (\n      v: V | void | undefined,\n      updateCache = false\n    ): V | undefined | void => {\n      const { aborted } = ac.signal\n      const ignoreAbort = options.ignoreFetchAbort && v !== undefined\n      if (options.status) {\n        if (aborted && !updateCache) {\n          options.status.fetchAborted = true\n          options.status.fetchError = ac.signal.reason\n          if (ignoreAbort) options.status.fetchAbortIgnored = true\n        } else {\n          options.status.fetchResolved = true\n        }\n      }\n      if (aborted && !ignoreAbort && !updateCache) {\n        return fetchFail(ac.signal.reason)\n      }\n      // either we didn't abort, and are still here, or we did, and ignored\n      const bf = p as BackgroundFetch<V>\n      if (this.#valList[index as Index] === p) {\n        if (v === undefined) {\n          if (bf.__staleWhileFetching) {\n            this.#valList[index as Index] = bf.__staleWhileFetching\n          } else {\n            this.delete(k)\n          }\n        } else {\n          if (options.status) options.status.fetchUpdated = true\n          this.set(k, v, fetchOpts.options)\n        }\n      }\n      return v\n    }\n\n    const eb = (er: any) => {\n      if (options.status) {\n        options.status.fetchRejected = true\n        options.status.fetchError = er\n      }\n      return fetchFail(er)\n    }\n\n    const fetchFail = (er: any): V | undefined => {\n      const { aborted } = ac.signal\n      const allowStaleAborted =\n        aborted && options.allowStaleOnFetchAbort\n      const allowStale =\n        allowStaleAborted || options.allowStaleOnFetchRejection\n      const noDelete = allowStale || options.noDeleteOnFetchRejection\n      const bf = p as BackgroundFetch<V>\n      if (this.#valList[index as Index] === p) {\n        // if we allow stale on fetch rejections, then we need to ensure that\n        // the stale value is not removed from the cache when the fetch fails.\n        const del = !noDelete || bf.__staleWhileFetching === undefined\n        if (del) {\n          this.delete(k)\n        } else if (!allowStaleAborted) {\n          // still replace the *promise* with the stale value,\n          // since we are done with the promise at this point.\n          // leave it untouched if we're still waiting for an\n          // aborted background fetch that hasn't yet returned.\n          this.#valList[index as Index] = bf.__staleWhileFetching\n        }\n      }\n      if (allowStale) {\n        if (options.status && bf.__staleWhileFetching !== undefined) {\n          options.status.returnedStale = true\n        }\n        return bf.__staleWhileFetching\n      } else if (bf.__returned === bf) {\n        throw er\n      }\n    }\n\n    const pcall = (\n      res: (v: V | void | undefined) => void,\n      rej: (e: any) => void\n    ) => {\n      const fmp = this.#fetchMethod?.(k, v, fetchOpts)\n      if (fmp && fmp instanceof Promise) {\n        fmp.then(v => res(v), rej)\n      }\n      // ignored, we go until we finish, regardless.\n      // defer check until we are actually aborting,\n      // so fetchMethod can override.\n      ac.signal.addEventListener('abort', () => {\n        if (\n          !options.ignoreFetchAbort ||\n          options.allowStaleOnFetchAbort\n        ) {\n          res()\n          // when it eventually resolves, update the cache.\n          if (options.allowStaleOnFetchAbort) {\n            res = v => cb(v, true)\n          }\n        }\n      })\n    }\n\n    if (options.status) options.status.fetchDispatched = true\n    const p = new Promise(pcall).then(cb, eb)\n    const bf = Object.assign(p, {\n      __abortController: ac,\n      __staleWhileFetching: v,\n      __returned: undefined,\n    })\n\n    if (index === undefined) {\n      // internal, don't expose status.\n      this.set(k, bf, { ...fetchOpts.options, status: undefined })\n      index = this.#keyMap.get(k)\n    } else {\n      this.#valList[index] = bf\n    }\n    return bf\n  }\n\n  #isBackgroundFetch(p: any): p is BackgroundFetch<V> {\n    if (!this.#hasFetchMethod) return false\n    const b = p as BackgroundFetch<V>\n    return (\n      !!b &&\n      b instanceof Promise &&\n      b.hasOwnProperty('__staleWhileFetching') &&\n      b.__abortController instanceof AbortController\n    )\n  }\n\n  /**\n   * Make an asynchronous cached fetch using the\n   * {@link LRUCache.OptionsBase.fetchMethod} function.\n   *\n   * If multiple fetches for the same key are issued, then they will all be\n   * coalesced into a single call to fetchMethod.\n   *\n   * Note that this means that handling options such as\n   * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort},\n   * {@link LRUCache.FetchOptions.signal},\n   * and {@link LRUCache.OptionsBase.allowStaleOnFetchRejection} will be\n   * determined by the FIRST fetch() call for a given key.\n   *\n   * This is a known (fixable) shortcoming which will be addresed on when\n   * someone complains about it, as the fix would involve added complexity and\n   * may not be worth the costs for this edge case.\n   */\n  fetch(\n    k: K,\n    fetchOptions: unknown extends FC\n      ? LRUCache.FetchOptions<K, V, FC>\n      : FC extends undefined | void\n      ? LRUCache.FetchOptionsNoContext<K, V, FC>\n      : LRUCache.FetchOptionsWithContext<K, V, FC>\n  ): Promise<void | V>\n  // this overload not allowed if context is required\n  fetch(\n    k: unknown extends FC\n      ? K\n      : FC extends undefined | void\n      ? K\n      : never,\n    fetchOptions?: unknown extends FC\n      ? LRUCache.FetchOptions<K, V, FC>\n      : FC extends undefined | void\n      ? LRUCache.FetchOptionsNoContext<K, V, FC>\n      : never\n  ): Promise<void | V>\n  async fetch(\n    k: K,\n    fetchOptions: LRUCache.FetchOptions<K, V, FC> = {}\n  ): Promise<void | V> {\n    const {\n      // get options\n      allowStale = this.allowStale,\n      updateAgeOnGet = this.updateAgeOnGet,\n      noDeleteOnStaleGet = this.noDeleteOnStaleGet,\n      // set options\n      ttl = this.ttl,\n      noDisposeOnSet = this.noDisposeOnSet,\n      size = 0,\n      sizeCalculation = this.sizeCalculation,\n      noUpdateTTL = this.noUpdateTTL,\n      // fetch exclusive options\n      noDeleteOnFetchRejection = this.noDeleteOnFetchRejection,\n      allowStaleOnFetchRejection = this.allowStaleOnFetchRejection,\n      ignoreFetchAbort = this.ignoreFetchAbort,\n      allowStaleOnFetchAbort = this.allowStaleOnFetchAbort,\n      context,\n      forceRefresh = false,\n      status,\n      signal,\n    } = fetchOptions\n\n    if (!this.#hasFetchMethod) {\n      if (status) status.fetch = 'get'\n      return this.get(k, {\n        allowStale,\n        updateAgeOnGet,\n        noDeleteOnStaleGet,\n        status,\n      })\n    }\n\n    const options = {\n      allowStale,\n      updateAgeOnGet,\n      noDeleteOnStaleGet,\n      ttl,\n      noDisposeOnSet,\n      size,\n      sizeCalculation,\n      noUpdateTTL,\n      noDeleteOnFetchRejection,\n      allowStaleOnFetchRejection,\n      allowStaleOnFetchAbort,\n      ignoreFetchAbort,\n      status,\n      signal,\n    }\n\n    let index = this.#keyMap.get(k)\n    if (index === undefined) {\n      if (status) status.fetch = 'miss'\n      const p = this.#backgroundFetch(k, index, options, context)\n      return (p.__returned = p)\n    } else {\n      // in cache, maybe already fetching\n      const v = this.#valList[index]\n      if (this.#isBackgroundFetch(v)) {\n        const stale =\n          allowStale && v.__staleWhileFetching !== undefined\n        if (status) {\n          status.fetch = 'inflight'\n          if (stale) status.returnedStale = true\n        }\n        return stale ? v.__staleWhileFetching : (v.__returned = v)\n      }\n\n      // if we force a refresh, that means do NOT serve the cached value,\n      // unless we are already in the process of refreshing the cache.\n      const isStale = this.#isStale(index)\n      if (!forceRefresh && !isStale) {\n        if (status) status.fetch = 'hit'\n        this.#moveToTail(index)\n        if (updateAgeOnGet) {\n          this.#updateItemAge(index)\n        }\n        if (status) this.#statusTTL(status, index)\n        return v\n      }\n\n      // ok, it is stale or a forced refresh, and not already fetching.\n      // refresh the cache.\n      const p = this.#backgroundFetch(k, index, options, context)\n      const hasStale = p.__staleWhileFetching !== undefined\n      const staleVal = hasStale && allowStale\n      if (status) {\n        status.fetch = isStale ? 'stale' : 'refresh'\n        if (staleVal && isStale) status.returnedStale = true\n      }\n      return staleVal ? p.__staleWhileFetching : (p.__returned = p)\n    }\n  }\n\n  /**\n   * Return a value from the cache. Will update the recency of the cache\n   * entry found.\n   *\n   * If the key is not found, get() will return `undefined`.\n   */\n  get(k: K, getOptions: LRUCache.GetOptions<K, V, FC> = {}) {\n    const {\n      allowStale = this.allowStale,\n      updateAgeOnGet = this.updateAgeOnGet,\n      noDeleteOnStaleGet = this.noDeleteOnStaleGet,\n      status,\n    } = getOptions\n    const index = this.#keyMap.get(k)\n    if (index !== undefined) {\n      const value = this.#valList[index]\n      const fetching = this.#isBackgroundFetch(value)\n      if (status) this.#statusTTL(status, index)\n      if (this.#isStale(index)) {\n        if (status) status.get = 'stale'\n        // delete only if not an in-flight background fetch\n        if (!fetching) {\n          if (!noDeleteOnStaleGet) {\n            this.delete(k)\n          }\n          if (status && allowStale) status.returnedStale = true\n          return allowStale ? value : undefined\n        } else {\n          if (\n            status &&\n            allowStale &&\n            value.__staleWhileFetching !== undefined\n          ) {\n            status.returnedStale = true\n          }\n          return allowStale ? value.__staleWhileFetching : undefined\n        }\n      } else {\n        if (status) status.get = 'hit'\n        // if we're currently fetching it, we don't actually have it yet\n        // it's not stale, which means this isn't a staleWhileRefetching.\n        // If it's not stale, and fetching, AND has a __staleWhileFetching\n        // value, then that means the user fetched with {forceRefresh:true},\n        // so it's safe to return that value.\n        if (fetching) {\n          return value.__staleWhileFetching\n        }\n        this.#moveToTail(index)\n        if (updateAgeOnGet) {\n          this.#updateItemAge(index)\n        }\n        return value\n      }\n    } else if (status) {\n      status.get = 'miss'\n    }\n  }\n\n  #connect(p: Index, n: Index) {\n    this.#prev[n] = p\n    this.#next[p] = n\n  }\n\n  #moveToTail(index: Index): void {\n    // if tail already, nothing to do\n    // if head, move head to next[index]\n    // else\n    //   move next[prev[index]] to next[index] (head has no prev)\n    //   move prev[next[index]] to prev[index]\n    // prev[index] = tail\n    // next[tail] = index\n    // tail = index\n    if (index !== this.#tail) {\n      if (index === this.#head) {\n        this.#head = this.#next[index] as Index\n      } else {\n        this.#connect(\n          this.#prev[index] as Index,\n          this.#next[index] as Index\n        )\n      }\n      this.#connect(this.#tail, index)\n      this.#tail = index\n    }\n  }\n\n  /**\n   * Deletes a key out of the cache.\n   * Returns true if the key was deleted, false otherwise.\n   */\n  delete(k: K) {\n    let deleted = false\n    if (this.#size !== 0) {\n      const index = this.#keyMap.get(k)\n      if (index !== undefined) {\n        deleted = true\n        if (this.#size === 1) {\n          this.clear()\n        } else {\n          this.#removeItemSize(index)\n          const v = this.#valList[index]\n          if (this.#isBackgroundFetch(v)) {\n            v.__abortController.abort(new Error('deleted'))\n          } else if (this.#hasDispose || this.#hasDisposeAfter) {\n            if (this.#hasDispose) {\n              this.#dispose?.(v as V, k, 'delete')\n            }\n            if (this.#hasDisposeAfter) {\n              this.#disposed?.push([v as V, k, 'delete'])\n            }\n          }\n          this.#keyMap.delete(k)\n          this.#keyList[index] = undefined\n          this.#valList[index] = undefined\n          if (index === this.#tail) {\n            this.#tail = this.#prev[index] as Index\n          } else if (index === this.#head) {\n            this.#head = this.#next[index] as Index\n          } else {\n            this.#next[this.#prev[index]] = this.#next[index]\n            this.#prev[this.#next[index]] = this.#prev[index]\n          }\n          this.#size--\n          this.#free.push(index)\n        }\n      }\n    }\n    if (this.#hasDisposeAfter && this.#disposed?.length) {\n      const dt = this.#disposed\n      let task: DisposeTask<K, V> | undefined\n      while ((task = dt?.shift())) {\n        this.#disposeAfter?.(...task)\n      }\n    }\n    return deleted\n  }\n\n  /**\n   * Clear the cache entirely, throwing away all values.\n   */\n  clear() {\n    for (const index of this.#rindexes({ allowStale: true })) {\n      const v = this.#valList[index]\n      if (this.#isBackgroundFetch(v)) {\n        v.__abortController.abort(new Error('deleted'))\n      } else {\n        const k = this.#keyList[index]\n        if (this.#hasDispose) {\n          this.#dispose?.(v as V, k as K, 'delete')\n        }\n        if (this.#hasDisposeAfter) {\n          this.#disposed?.push([v as V, k as K, 'delete'])\n        }\n      }\n    }\n\n    this.#keyMap.clear()\n    this.#valList.fill(undefined)\n    this.#keyList.fill(undefined)\n    if (this.#ttls && this.#starts) {\n      this.#ttls.fill(0)\n      this.#starts.fill(0)\n    }\n    if (this.#sizes) {\n      this.#sizes.fill(0)\n    }\n    this.#head = 0 as Index\n    this.#tail = 0 as Index\n    this.#free.length = 0\n    this.#calculatedSize = 0\n    this.#size = 0\n    if (this.#hasDisposeAfter && this.#disposed) {\n      const dt = this.#disposed\n      let task: DisposeTask<K, V> | undefined\n      while ((task = dt?.shift())) {\n        this.#disposeAfter?.(...task)\n      }\n    }\n  }\n}\n\nexport default LRUCache\n",null],"names":[],"mappings":"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"}},
    {"offset": {"line": 1204, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1208, "column": 0}, "map": {"version":3,"sources":["../../src/index-cjs.ts","/turbopack/[project]/node_modules/mysql2/node_modules/lru-cache/dist/cjs/index-cjs.js"],"sourcesContent":["import LRUCache from './index.js'\n\nexport = Object.assign(LRUCache, { default: LRUCache, LRUCache })\n",null],"names":[],"mappings":";;;;;;AAAA,MAAA,aAAA,gBAAA;AAEA,OAAA,OAAA,GAAS,OAAO,MAAM,CAAC,WAAA,OAAQ,EAAE;IAAE,SAAS,WAAA,OAAQ;IAAE,UAAA,WAAA,OAAQ;AAAA"}},
    {"offset": {"line": 1219, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1223, "column": 0}, "map": {"version":3,"sources":["../../src/index.ts","/turbopack/[project]/node_modules/lru-cache/dist/commonjs/index.js"],"sourcesContent":["/**\n * @module LRUCache\n */\n\n// module-private names and types\ntype Perf = { now: () => number }\nconst perf: Perf =\n  typeof performance === 'object' &&\n  performance &&\n  typeof performance.now === 'function'\n    ? performance\n    : Date\n\nconst warned = new Set<string>()\n\n// either a function or a class\ntype ForC = ((...a: any[]) => any) | { new (...a: any[]): any }\n\n/* c8 ignore start */\nconst PROCESS = (\n  typeof process === 'object' && !!process ? process : {}\n) as { [k: string]: any }\n/* c8 ignore start */\n\nconst emitWarning = (\n  msg: string,\n  type: string,\n  code: string,\n  fn: ForC\n) => {\n  typeof PROCESS.emitWarning === 'function'\n    ? PROCESS.emitWarning(msg, type, code, fn)\n    : console.error(`[${code}] ${type}: ${msg}`)\n}\n\nlet AC = globalThis.AbortController\nlet AS = globalThis.AbortSignal\n\n/* c8 ignore start */\nif (typeof AC === 'undefined') {\n  //@ts-ignore\n  AS = class AbortSignal {\n    onabort?: (...a: any[]) => any\n    _onabort: ((...a: any[]) => any)[] = []\n    reason?: any\n    aborted: boolean = false\n    addEventListener(_: string, fn: (...a: any[]) => any) {\n      this._onabort.push(fn)\n    }\n  }\n  //@ts-ignore\n  AC = class AbortController {\n    constructor() {\n      warnACPolyfill()\n    }\n    signal = new AS()\n    abort(reason: any) {\n      if (this.signal.aborted) return\n      //@ts-ignore\n      this.signal.reason = reason\n      //@ts-ignore\n      this.signal.aborted = true\n      //@ts-ignore\n      for (const fn of this.signal._onabort) {\n        fn(reason)\n      }\n      this.signal.onabort?.(reason)\n    }\n  }\n  let printACPolyfillWarning =\n    PROCESS.env?.LRU_CACHE_IGNORE_AC_WARNING !== '1'\n  const warnACPolyfill = () => {\n    if (!printACPolyfillWarning) return\n    printACPolyfillWarning = false\n    emitWarning(\n      'AbortController is not defined. If using lru-cache in ' +\n        'node 14, load an AbortController polyfill from the ' +\n        '`node-abort-controller` package. A minimal polyfill is ' +\n        'provided for use by LRUCache.fetch(), but it should not be ' +\n        'relied upon in other contexts (eg, passing it to other APIs that ' +\n        'use AbortController/AbortSignal might have undesirable effects). ' +\n        'You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.',\n      'NO_ABORT_CONTROLLER',\n      'ENOTSUP',\n      warnACPolyfill\n    )\n  }\n}\n/* c8 ignore stop */\n\nconst shouldWarn = (code: string) => !warned.has(code)\n\nconst TYPE = Symbol('type')\nexport type PosInt = number & { [TYPE]: 'Positive Integer' }\nexport type Index = number & { [TYPE]: 'LRUCache Index' }\n\nconst isPosInt = (n: any): n is PosInt =>\n  n && n === Math.floor(n) && n > 0 && isFinite(n)\n\nexport type UintArray = Uint8Array | Uint16Array | Uint32Array\nexport type NumberArray = UintArray | number[]\n\n/* c8 ignore start */\n// This is a little bit ridiculous, tbh.\n// The maximum array length is 2^32-1 or thereabouts on most JS impls.\n// And well before that point, you're caching the entire world, I mean,\n// that's ~32GB of just integers for the next/prev links, plus whatever\n// else to hold that many keys and values.  Just filling the memory with\n// zeroes at init time is brutal when you get that big.\n// But why not be complete?\n// Maybe in the future, these limits will have expanded.\nconst getUintArray = (max: number) =>\n  !isPosInt(max)\n    ? null\n    : max <= Math.pow(2, 8)\n    ? Uint8Array\n    : max <= Math.pow(2, 16)\n    ? Uint16Array\n    : max <= Math.pow(2, 32)\n    ? Uint32Array\n    : max <= Number.MAX_SAFE_INTEGER\n    ? ZeroArray\n    : null\n/* c8 ignore stop */\n\nclass ZeroArray extends Array<number> {\n  constructor(size: number) {\n    super(size)\n    this.fill(0)\n  }\n}\nexport type { ZeroArray }\nexport type { Stack }\n\nexport type StackLike = Stack | Index[]\nclass Stack {\n  heap: NumberArray\n  length: number\n  // private constructor\n  static #constructing: boolean = false\n  static create(max: number): StackLike {\n    const HeapCls = getUintArray(max)\n    if (!HeapCls) return []\n    Stack.#constructing = true\n    const s = new Stack(max, HeapCls)\n    Stack.#constructing = false\n    return s\n  }\n  constructor(\n    max: number,\n    HeapCls: { new (n: number): NumberArray }\n  ) {\n    /* c8 ignore start */\n    if (!Stack.#constructing) {\n      throw new TypeError('instantiate Stack using Stack.create(n)')\n    }\n    /* c8 ignore stop */\n    this.heap = new HeapCls(max)\n    this.length = 0\n  }\n  push(n: Index) {\n    this.heap[this.length++] = n\n  }\n  pop(): Index {\n    return this.heap[--this.length] as Index\n  }\n}\n\n/**\n * Promise representing an in-progress {@link LRUCache#fetch} call\n */\nexport type BackgroundFetch<V> = Promise<V | undefined> & {\n  __returned: BackgroundFetch<V> | undefined\n  __abortController: AbortController\n  __staleWhileFetching: V | undefined\n}\n\nexport type DisposeTask<K, V> = [\n  value: V,\n  key: K,\n  reason: LRUCache.DisposeReason\n]\n\nexport namespace LRUCache {\n  /**\n   * An integer greater than 0, reflecting the calculated size of items\n   */\n  export type Size = number\n\n  /**\n   * Integer greater than 0, representing some number of milliseconds, or the\n   * time at which a TTL started counting from.\n   */\n  export type Milliseconds = number\n\n  /**\n   * An integer greater than 0, reflecting a number of items\n   */\n  export type Count = number\n\n  /**\n   * The reason why an item was removed from the cache, passed\n   * to the {@link Disposer} methods.\n   */\n  export type DisposeReason = 'evict' | 'set' | 'delete'\n  /**\n   * A method called upon item removal, passed as the\n   * {@link OptionsBase.dispose} and/or\n   * {@link OptionsBase.disposeAfter} options.\n   */\n  export type Disposer<K, V> = (\n    value: V,\n    key: K,\n    reason: DisposeReason\n  ) => void\n\n  /**\n   * A function that returns the effective calculated size\n   * of an entry in the cache.\n   */\n  export type SizeCalculator<K, V> = (value: V, key: K) => Size\n\n  /**\n   * Options provided to the\n   * {@link OptionsBase.fetchMethod} function.\n   */\n  export interface FetcherOptions<K, V, FC = unknown> {\n    signal: AbortSignal\n    options: FetcherFetchOptions<K, V, FC>\n    /**\n     * Object provided in the {@link FetchOptions.context} option to\n     * {@link LRUCache#fetch}\n     */\n    context: FC\n  }\n\n  /**\n   * Status object that may be passed to {@link LRUCache#fetch},\n   * {@link LRUCache#get}, {@link LRUCache#set}, and {@link LRUCache#has}.\n   */\n  export interface Status<V> {\n    /**\n     * The status of a set() operation.\n     *\n     * - add: the item was not found in the cache, and was added\n     * - update: the item was in the cache, with the same value provided\n     * - replace: the item was in the cache, and replaced\n     * - miss: the item was not added to the cache for some reason\n     */\n    set?: 'add' | 'update' | 'replace' | 'miss'\n\n    /**\n     * the ttl stored for the item, or undefined if ttls are not used.\n     */\n    ttl?: Milliseconds\n\n    /**\n     * the start time for the item, or undefined if ttls are not used.\n     */\n    start?: Milliseconds\n\n    /**\n     * The timestamp used for TTL calculation\n     */\n    now?: Milliseconds\n\n    /**\n     * the remaining ttl for the item, or undefined if ttls are not used.\n     */\n    remainingTTL?: Milliseconds\n\n    /**\n     * The calculated size for the item, if sizes are used.\n     */\n    entrySize?: Size\n\n    /**\n     * The total calculated size of the cache, if sizes are used.\n     */\n    totalCalculatedSize?: Size\n\n    /**\n     * A flag indicating that the item was not stored, due to exceeding the\n     * {@link OptionsBase.maxEntrySize}\n     */\n    maxEntrySizeExceeded?: true\n\n    /**\n     * The old value, specified in the case of `set:'update'` or\n     * `set:'replace'`\n     */\n    oldValue?: V\n\n    /**\n     * The results of a {@link LRUCache#has} operation\n     *\n     * - hit: the item was found in the cache\n     * - stale: the item was found in the cache, but is stale\n     * - miss: the item was not found in the cache\n     */\n    has?: 'hit' | 'stale' | 'miss'\n\n    /**\n     * The status of a {@link LRUCache#fetch} operation.\n     * Note that this can change as the underlying fetch() moves through\n     * various states.\n     *\n     * - inflight: there is another fetch() for this key which is in process\n     * - get: there is no fetchMethod, so {@link LRUCache#get} was called.\n     * - miss: the item is not in cache, and will be fetched.\n     * - hit: the item is in the cache, and was resolved immediately.\n     * - stale: the item is in the cache, but stale.\n     * - refresh: the item is in the cache, and not stale, but\n     *   {@link FetchOptions.forceRefresh} was specified.\n     */\n    fetch?: 'get' | 'inflight' | 'miss' | 'hit' | 'stale' | 'refresh'\n\n    /**\n     * The {@link OptionsBase.fetchMethod} was called\n     */\n    fetchDispatched?: true\n\n    /**\n     * The cached value was updated after a successful call to\n     * {@link OptionsBase.fetchMethod}\n     */\n    fetchUpdated?: true\n\n    /**\n     * The reason for a fetch() rejection.  Either the error raised by the\n     * {@link OptionsBase.fetchMethod}, or the reason for an\n     * AbortSignal.\n     */\n    fetchError?: Error\n\n    /**\n     * The fetch received an abort signal\n     */\n    fetchAborted?: true\n\n    /**\n     * The abort signal received was ignored, and the fetch was allowed to\n     * continue.\n     */\n    fetchAbortIgnored?: true\n\n    /**\n     * The fetchMethod promise resolved successfully\n     */\n    fetchResolved?: true\n\n    /**\n     * The fetchMethod promise was rejected\n     */\n    fetchRejected?: true\n\n    /**\n     * The status of a {@link LRUCache#get} operation.\n     *\n     * - fetching: The item is currently being fetched.  If a previous value\n     *   is present and allowed, that will be returned.\n     * - stale: The item is in the cache, and is stale.\n     * - hit: the item is in the cache\n     * - miss: the item is not in the cache\n     */\n    get?: 'stale' | 'hit' | 'miss'\n\n    /**\n     * A fetch or get operation returned a stale value.\n     */\n    returnedStale?: true\n  }\n\n  /**\n   * options which override the options set in the LRUCache constructor\n   * when calling {@link LRUCache#fetch}.\n   *\n   * This is the union of {@link GetOptions} and {@link SetOptions}, plus\n   * {@link OptionsBase.noDeleteOnFetchRejection},\n   * {@link OptionsBase.allowStaleOnFetchRejection},\n   * {@link FetchOptions.forceRefresh}, and\n   * {@link FetcherOptions.context}\n   *\n   * Any of these may be modified in the {@link OptionsBase.fetchMethod}\n   * function, but the {@link GetOptions} fields will of course have no\n   * effect, as the {@link LRUCache#get} call already happened by the time\n   * the fetchMethod is called.\n   */\n  export interface FetcherFetchOptions<K, V, FC = unknown>\n    extends Pick<\n      OptionsBase<K, V, FC>,\n      | 'allowStale'\n      | 'updateAgeOnGet'\n      | 'noDeleteOnStaleGet'\n      | 'sizeCalculation'\n      | 'ttl'\n      | 'noDisposeOnSet'\n      | 'noUpdateTTL'\n      | 'noDeleteOnFetchRejection'\n      | 'allowStaleOnFetchRejection'\n      | 'ignoreFetchAbort'\n      | 'allowStaleOnFetchAbort'\n    > {\n    status?: Status<V>\n    size?: Size\n  }\n\n  /**\n   * Options that may be passed to the {@link LRUCache#fetch} method.\n   */\n  export interface FetchOptions<K, V, FC>\n    extends FetcherFetchOptions<K, V, FC> {\n    /**\n     * Set to true to force a re-load of the existing data, even if it\n     * is not yet stale.\n     */\n    forceRefresh?: boolean\n    /**\n     * Context provided to the {@link OptionsBase.fetchMethod} as\n     * the {@link FetcherOptions.context} param.\n     *\n     * If the FC type is specified as unknown (the default),\n     * undefined or void, then this is optional.  Otherwise, it will\n     * be required.\n     */\n    context?: FC\n    signal?: AbortSignal\n    status?: Status<V>\n  }\n  /**\n   * Options provided to {@link LRUCache#fetch} when the FC type is something\n   * other than `unknown`, `undefined`, or `void`\n   */\n  export interface FetchOptionsWithContext<K, V, FC>\n    extends FetchOptions<K, V, FC> {\n    context: FC\n  }\n  /**\n   * Options provided to {@link LRUCache#fetch} when the FC type is\n   * `undefined` or `void`\n   */\n  export interface FetchOptionsNoContext<K, V>\n    extends FetchOptions<K, V, undefined> {\n    context?: undefined\n  }\n\n  /**\n   * Options that may be passed to the {@link LRUCache#has} method.\n   */\n  export interface HasOptions<K, V, FC>\n    extends Pick<OptionsBase<K, V, FC>, 'updateAgeOnHas'> {\n    status?: Status<V>\n  }\n\n  /**\n   * Options that may be passed to the {@link LRUCache#get} method.\n   */\n  export interface GetOptions<K, V, FC>\n    extends Pick<\n      OptionsBase<K, V, FC>,\n      'allowStale' | 'updateAgeOnGet' | 'noDeleteOnStaleGet'\n    > {\n    status?: Status<V>\n  }\n\n  /**\n   * Options that may be passed to the {@link LRUCache#peek} method.\n   */\n  export interface PeekOptions<K, V, FC>\n    extends Pick<OptionsBase<K, V, FC>, 'allowStale'> {}\n\n  /**\n   * Options that may be passed to the {@link LRUCache#set} method.\n   */\n  export interface SetOptions<K, V, FC>\n    extends Pick<\n      OptionsBase<K, V, FC>,\n      'sizeCalculation' | 'ttl' | 'noDisposeOnSet' | 'noUpdateTTL'\n    > {\n    /**\n     * If size tracking is enabled, then setting an explicit size\n     * in the {@link LRUCache#set} call will prevent calling the\n     * {@link OptionsBase.sizeCalculation} function.\n     */\n    size?: Size\n    /**\n     * If TTL tracking is enabled, then setting an explicit start\n     * time in the {@link LRUCache#set} call will override the\n     * default time from `performance.now()` or `Date.now()`.\n     *\n     * Note that it must be a valid value for whichever time-tracking\n     * method is in use.\n     */\n    start?: Milliseconds\n    status?: Status<V>\n  }\n\n  /**\n   * The type signature for the {@link OptionsBase.fetchMethod} option.\n   */\n  export type Fetcher<K, V, FC = unknown> = (\n    key: K,\n    staleValue: V | undefined,\n    options: FetcherOptions<K, V, FC>\n  ) => Promise<V | undefined | void> | V | undefined | void\n\n  /**\n   * Options which may be passed to the {@link LRUCache} constructor.\n   *\n   * Most of these may be overridden in the various options that use\n   * them.\n   *\n   * Despite all being technically optional, the constructor requires that\n   * a cache is at minimum limited by one or more of {@link OptionsBase.max},\n   * {@link OptionsBase.ttl}, or {@link OptionsBase.maxSize}.\n   *\n   * If {@link OptionsBase.ttl} is used alone, then it is strongly advised\n   * (and in fact required by the type definitions here) that the cache\n   * also set {@link OptionsBase.ttlAutopurge}, to prevent potentially\n   * unbounded storage.\n   */\n  export interface OptionsBase<K, V, FC> {\n    /**\n     * The maximum number of items to store in the cache before evicting\n     * old entries. This is read-only on the {@link LRUCache} instance,\n     * and may not be overridden.\n     *\n     * If set, then storage space will be pre-allocated at construction\n     * time, and the cache will perform significantly faster.\n     *\n     * Note that significantly fewer items may be stored, if\n     * {@link OptionsBase.maxSize} and/or {@link OptionsBase.ttl} are also\n     * set.\n     */\n    max?: Count\n\n    /**\n     * Max time in milliseconds for items to live in cache before they are\n     * considered stale.  Note that stale items are NOT preemptively removed\n     * by default, and MAY live in the cache long after they have expired.\n     *\n     * Also, as this cache is optimized for LRU/MRU operations, some of\n     * the staleness/TTL checks will reduce performance, as they will incur\n     * overhead by deleting items.\n     *\n     * Must be an integer number of ms. If set to 0, this indicates \"no TTL\"\n     *\n     * @default 0\n     */\n    ttl?: Milliseconds\n\n    /**\n     * Minimum amount of time in ms in which to check for staleness.\n     * Defaults to 1, which means that the current time is checked\n     * at most once per millisecond.\n     *\n     * Set to 0 to check the current time every time staleness is tested.\n     * (This reduces performance, and is theoretically unnecessary.)\n     *\n     * Setting this to a higher value will improve performance somewhat\n     * while using ttl tracking, albeit at the expense of keeping stale\n     * items around a bit longer than their TTLs would indicate.\n     *\n     * @default 1\n     */\n    ttlResolution?: Milliseconds\n\n    /**\n     * Preemptively remove stale items from the cache.\n     * Note that this may significantly degrade performance,\n     * especially if the cache is storing a large number of items.\n     * It is almost always best to just leave the stale items in\n     * the cache, and let them fall out as new items are added.\n     *\n     * Note that this means that {@link OptionsBase.allowStale} is a bit\n     * pointless, as stale items will be deleted almost as soon as they\n     * expire.\n     *\n     * @default false\n     */\n    ttlAutopurge?: boolean\n\n    /**\n     * Update the age of items on {@link LRUCache#get}, renewing their TTL\n     *\n     * Has no effect if {@link OptionsBase.ttl} is not set.\n     *\n     * @default false\n     */\n    updateAgeOnGet?: boolean\n\n    /**\n     * Update the age of items on {@link LRUCache#has}, renewing their TTL\n     *\n     * Has no effect if {@link OptionsBase.ttl} is not set.\n     *\n     * @default false\n     */\n    updateAgeOnHas?: boolean\n\n    /**\n     * Allow {@link LRUCache#get} and {@link LRUCache#fetch} calls to return\n     * stale data, if available.\n     */\n    allowStale?: boolean\n\n    /**\n     * Function that is called on items when they are dropped from the cache.\n     * This can be handy if you want to close file descriptors or do other\n     * cleanup tasks when items are no longer accessible. Called with `key,\n     * value`.  It's called before actually removing the item from the\n     * internal cache, so it is *NOT* safe to re-add them.\n     *\n     * Use {@link OptionsBase.disposeAfter} if you wish to dispose items after\n     * they have been full removed, when it is safe to add them back to the\n     * cache.\n     */\n    dispose?: Disposer<K, V>\n\n    /**\n     * The same as {@link OptionsBase.dispose}, but called *after* the entry\n     * is completely removed and the cache is once again in a clean state.\n     * It is safe to add an item right back into the cache at this point.\n     * However, note that it is *very* easy to inadvertently create infinite\n     * recursion this way.\n     */\n    disposeAfter?: Disposer<K, V>\n\n    /**\n     * Set to true to suppress calling the\n     * {@link OptionsBase.dispose} function if the entry key is\n     * still accessible within the cache.\n     * This may be overridden by passing an options object to\n     * {@link LRUCache#set}.\n     */\n    noDisposeOnSet?: boolean\n\n    /**\n     * Boolean flag to tell the cache to not update the TTL when\n     * setting a new value for an existing key (ie, when updating a value\n     * rather than inserting a new value).  Note that the TTL value is\n     * _always_ set (if provided) when adding a new entry into the cache.\n     *\n     * Has no effect if a {@link OptionsBase.ttl} is not set.\n     */\n    noUpdateTTL?: boolean\n\n    /**\n     * If you wish to track item size, you must provide a maxSize\n     * note that we still will only keep up to max *actual items*,\n     * if max is set, so size tracking may cause fewer than max items\n     * to be stored.  At the extreme, a single item of maxSize size\n     * will cause everything else in the cache to be dropped when it\n     * is added.  Use with caution!\n     *\n     * Note also that size tracking can negatively impact performance,\n     * though for most cases, only minimally.\n     */\n    maxSize?: Size\n\n    /**\n     * The maximum allowed size for any single item in the cache.\n     *\n     * If a larger item is passed to {@link LRUCache#set} or returned by a\n     * {@link OptionsBase.fetchMethod}, then it will not be stored in the\n     * cache.\n     */\n    maxEntrySize?: Size\n\n    /**\n     * A function that returns a number indicating the item's size.\n     *\n     * If not provided, and {@link OptionsBase.maxSize} or\n     * {@link OptionsBase.maxEntrySize} are set, then all\n     * {@link LRUCache#set} calls **must** provide an explicit\n     * {@link SetOptions.size} or sizeCalculation param.\n     */\n    sizeCalculation?: SizeCalculator<K, V>\n\n    /**\n     * Method that provides the implementation for {@link LRUCache#fetch}\n     */\n    fetchMethod?: Fetcher<K, V, FC>\n\n    /**\n     * Set to true to suppress the deletion of stale data when a\n     * {@link OptionsBase.fetchMethod} returns a rejected promise.\n     */\n    noDeleteOnFetchRejection?: boolean\n\n    /**\n     * Do not delete stale items when they are retrieved with\n     * {@link LRUCache#get}.\n     *\n     * Note that the `get` return value will still be `undefined`\n     * unless {@link OptionsBase.allowStale} is true.\n     */\n    noDeleteOnStaleGet?: boolean\n\n    /**\n     * Set to true to allow returning stale data when a\n     * {@link OptionsBase.fetchMethod} throws an error or returns a rejected\n     * promise.\n     *\n     * This differs from using {@link OptionsBase.allowStale} in that stale\n     * data will ONLY be returned in the case that the\n     * {@link LRUCache#fetch} fails, not any other times.\n     */\n    allowStaleOnFetchRejection?: boolean\n\n    /**\n     * Set to true to return a stale value from the cache when the\n     * `AbortSignal` passed to the {@link OptionsBase.fetchMethod} dispatches an `'abort'`\n     * event, whether user-triggered, or due to internal cache behavior.\n     *\n     * Unless {@link OptionsBase.ignoreFetchAbort} is also set, the underlying\n     * {@link OptionsBase.fetchMethod} will still be considered canceled, and\n     * any value it returns will be ignored and not cached.\n     *\n     * Caveat: since fetches are aborted when a new value is explicitly\n     * set in the cache, this can lead to fetch returning a stale value,\n     * since that was the fallback value _at the moment the `fetch()` was\n     * initiated_, even though the new updated value is now present in\n     * the cache.\n     *\n     * For example:\n     *\n     * ```ts\n     * const cache = new LRUCache<string, any>({\n     *   ttl: 100,\n     *   fetchMethod: async (url, oldValue, { signal }) =>  {\n     *     const res = await fetch(url, { signal })\n     *     return await res.json()\n     *   }\n     * })\n     * cache.set('https://example.com/', { some: 'data' })\n     * // 100ms go by...\n     * const result = cache.fetch('https://example.com/')\n     * cache.set('https://example.com/', { other: 'thing' })\n     * console.log(await result) // { some: 'data' }\n     * console.log(cache.get('https://example.com/')) // { other: 'thing' }\n     * ```\n     */\n    allowStaleOnFetchAbort?: boolean\n\n    /**\n     * Set to true to ignore the `abort` event emitted by the `AbortSignal`\n     * object passed to {@link OptionsBase.fetchMethod}, and still cache the\n     * resulting resolution value, as long as it is not `undefined`.\n     *\n     * When used on its own, this means aborted {@link LRUCache#fetch} calls are not\n     * immediately resolved or rejected when they are aborted, and instead\n     * take the full time to await.\n     *\n     * When used with {@link OptionsBase.allowStaleOnFetchAbort}, aborted\n     * {@link LRUCache#fetch} calls will resolve immediately to their stale\n     * cached value or `undefined`, and will continue to process and eventually\n     * update the cache when they resolve, as long as the resulting value is\n     * not `undefined`, thus supporting a \"return stale on timeout while\n     * refreshing\" mechanism by passing `AbortSignal.timeout(n)` as the signal.\n     *\n     * **Note**: regardless of this setting, an `abort` event _is still\n     * emitted on the `AbortSignal` object_, so may result in invalid results\n     * when passed to other underlying APIs that use AbortSignals.\n     *\n     * This may be overridden in the {@link OptionsBase.fetchMethod} or the\n     * call to {@link LRUCache#fetch}.\n     */\n    ignoreFetchAbort?: boolean\n  }\n\n  export interface OptionsMaxLimit<K, V, FC>\n    extends OptionsBase<K, V, FC> {\n    max: Count\n  }\n  export interface OptionsTTLLimit<K, V, FC>\n    extends OptionsBase<K, V, FC> {\n    ttl: Milliseconds\n    ttlAutopurge: boolean\n  }\n  export interface OptionsSizeLimit<K, V, FC>\n    extends OptionsBase<K, V, FC> {\n    maxSize: Size\n  }\n\n  /**\n   * The valid safe options for the {@link LRUCache} constructor\n   */\n  export type Options<K, V, FC> =\n    | OptionsMaxLimit<K, V, FC>\n    | OptionsSizeLimit<K, V, FC>\n    | OptionsTTLLimit<K, V, FC>\n\n  /**\n   * Entry objects used by {@link LRUCache#load} and {@link LRUCache#dump},\n   * and returned by {@link LRUCache#info}.\n   */\n  export interface Entry<V> {\n    value: V\n    ttl?: Milliseconds\n    size?: Size\n    start?: Milliseconds\n  }\n}\n\n/**\n * Default export, the thing you're using this module to get.\n *\n * All properties from the options object (with the exception of\n * {@link OptionsBase.max} and {@link OptionsBase.maxSize}) are added as\n * normal public members. (`max` and `maxBase` are read-only getters.)\n * Changing any of these will alter the defaults for subsequent method calls,\n * but is otherwise safe.\n */\nexport class LRUCache<K extends {}, V extends {}, FC = unknown> implements Map<K,V> {\n  // properties coming in from the options of these, only max and maxSize\n  // really *need* to be protected. The rest can be modified, as they just\n  // set defaults for various methods.\n  readonly #max: LRUCache.Count\n  readonly #maxSize: LRUCache.Size\n  readonly #dispose?: LRUCache.Disposer<K, V>\n  readonly #disposeAfter?: LRUCache.Disposer<K, V>\n  readonly #fetchMethod?: LRUCache.Fetcher<K, V, FC>\n\n  /**\n   * {@link LRUCache.OptionsBase.ttl}\n   */\n  ttl: LRUCache.Milliseconds\n\n  /**\n   * {@link LRUCache.OptionsBase.ttlResolution}\n   */\n  ttlResolution: LRUCache.Milliseconds\n  /**\n   * {@link LRUCache.OptionsBase.ttlAutopurge}\n   */\n  ttlAutopurge: boolean\n  /**\n   * {@link LRUCache.OptionsBase.updateAgeOnGet}\n   */\n  updateAgeOnGet: boolean\n  /**\n   * {@link LRUCache.OptionsBase.updateAgeOnHas}\n   */\n  updateAgeOnHas: boolean\n  /**\n   * {@link LRUCache.OptionsBase.allowStale}\n   */\n  allowStale: boolean\n\n  /**\n   * {@link LRUCache.OptionsBase.noDisposeOnSet}\n   */\n  noDisposeOnSet: boolean\n  /**\n   * {@link LRUCache.OptionsBase.noUpdateTTL}\n   */\n  noUpdateTTL: boolean\n  /**\n   * {@link LRUCache.OptionsBase.maxEntrySize}\n   */\n  maxEntrySize: LRUCache.Size\n  /**\n   * {@link LRUCache.OptionsBase.sizeCalculation}\n   */\n  sizeCalculation?: LRUCache.SizeCalculator<K, V>\n  /**\n   * {@link LRUCache.OptionsBase.noDeleteOnFetchRejection}\n   */\n  noDeleteOnFetchRejection: boolean\n  /**\n   * {@link LRUCache.OptionsBase.noDeleteOnStaleGet}\n   */\n  noDeleteOnStaleGet: boolean\n  /**\n   * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort}\n   */\n  allowStaleOnFetchAbort: boolean\n  /**\n   * {@link LRUCache.OptionsBase.allowStaleOnFetchRejection}\n   */\n  allowStaleOnFetchRejection: boolean\n  /**\n   * {@link LRUCache.OptionsBase.ignoreFetchAbort}\n   */\n  ignoreFetchAbort: boolean\n\n  // computed properties\n  #size: LRUCache.Count\n  #calculatedSize: LRUCache.Size\n  #keyMap: Map<K, Index>\n  #keyList: (K | undefined)[]\n  #valList: (V | BackgroundFetch<V> | undefined)[]\n  #next: NumberArray\n  #prev: NumberArray\n  #head: Index\n  #tail: Index\n  #free: StackLike\n  #disposed?: DisposeTask<K, V>[]\n  #sizes?: ZeroArray\n  #starts?: ZeroArray\n  #ttls?: ZeroArray\n\n  #hasDispose: boolean\n  #hasFetchMethod: boolean\n  #hasDisposeAfter: boolean\n\n  /**\n   * Do not call this method unless you need to inspect the\n   * inner workings of the cache.  If anything returned by this\n   * object is modified in any way, strange breakage may occur.\n   *\n   * These fields are private for a reason!\n   *\n   * @internal\n   */\n  static unsafeExposeInternals<\n    K extends {},\n    V extends {},\n    FC extends unknown = unknown\n  >(c: LRUCache<K, V, FC>) {\n    return {\n      // properties\n      starts: c.#starts,\n      ttls: c.#ttls,\n      sizes: c.#sizes,\n      keyMap: c.#keyMap as Map<K, number>,\n      keyList: c.#keyList,\n      valList: c.#valList,\n      next: c.#next,\n      prev: c.#prev,\n      get head() {\n        return c.#head\n      },\n      get tail() {\n        return c.#tail\n      },\n      free: c.#free,\n      // methods\n      isBackgroundFetch: (p: any) => c.#isBackgroundFetch(p),\n      backgroundFetch: (\n        k: K,\n        index: number | undefined,\n        options: LRUCache.FetchOptions<K, V, FC>,\n        context: any\n      ): BackgroundFetch<V> =>\n        c.#backgroundFetch(\n          k,\n          index as Index | undefined,\n          options,\n          context\n        ),\n      moveToTail: (index: number): void =>\n        c.#moveToTail(index as Index),\n      indexes: (options?: { allowStale: boolean }) =>\n        c.#indexes(options),\n      rindexes: (options?: { allowStale: boolean }) =>\n        c.#rindexes(options),\n      isStale: (index: number | undefined) =>\n        c.#isStale(index as Index),\n    }\n  }\n\n  // Protected read-only members\n\n  /**\n   * {@link LRUCache.OptionsBase.max} (read-only)\n   */\n  get max(): LRUCache.Count {\n    return this.#max\n  }\n  /**\n   * {@link LRUCache.OptionsBase.maxSize} (read-only)\n   */\n  get maxSize(): LRUCache.Count {\n    return this.#maxSize\n  }\n  /**\n   * The total computed size of items in the cache (read-only)\n   */\n  get calculatedSize(): LRUCache.Size {\n    return this.#calculatedSize\n  }\n  /**\n   * The number of items stored in the cache (read-only)\n   */\n  get size(): LRUCache.Count {\n    return this.#size\n  }\n  /**\n   * {@link LRUCache.OptionsBase.fetchMethod} (read-only)\n   */\n  get fetchMethod(): LRUCache.Fetcher<K, V, FC> | undefined {\n    return this.#fetchMethod\n  }\n  /**\n   * {@link LRUCache.OptionsBase.dispose} (read-only)\n   */\n  get dispose() {\n    return this.#dispose\n  }\n  /**\n   * {@link LRUCache.OptionsBase.disposeAfter} (read-only)\n   */\n  get disposeAfter() {\n    return this.#disposeAfter\n  }\n\n  constructor(\n    options: LRUCache.Options<K, V, FC> | LRUCache<K, V, FC>\n  ) {\n    const {\n      max = 0,\n      ttl,\n      ttlResolution = 1,\n      ttlAutopurge,\n      updateAgeOnGet,\n      updateAgeOnHas,\n      allowStale,\n      dispose,\n      disposeAfter,\n      noDisposeOnSet,\n      noUpdateTTL,\n      maxSize = 0,\n      maxEntrySize = 0,\n      sizeCalculation,\n      fetchMethod,\n      noDeleteOnFetchRejection,\n      noDeleteOnStaleGet,\n      allowStaleOnFetchRejection,\n      allowStaleOnFetchAbort,\n      ignoreFetchAbort,\n    } = options\n\n    if (max !== 0 && !isPosInt(max)) {\n      throw new TypeError('max option must be a nonnegative integer')\n    }\n\n    const UintArray = max ? getUintArray(max) : Array\n    if (!UintArray) {\n      throw new Error('invalid max value: ' + max)\n    }\n\n    this.#max = max\n    this.#maxSize = maxSize\n    this.maxEntrySize = maxEntrySize || this.#maxSize\n    this.sizeCalculation = sizeCalculation\n    if (this.sizeCalculation) {\n      if (!this.#maxSize && !this.maxEntrySize) {\n        throw new TypeError(\n          'cannot set sizeCalculation without setting maxSize or maxEntrySize'\n        )\n      }\n      if (typeof this.sizeCalculation !== 'function') {\n        throw new TypeError('sizeCalculation set to non-function')\n      }\n    }\n\n    if (\n      fetchMethod !== undefined &&\n      typeof fetchMethod !== 'function'\n    ) {\n      throw new TypeError(\n        'fetchMethod must be a function if specified'\n      )\n    }\n    this.#fetchMethod = fetchMethod\n    this.#hasFetchMethod = !!fetchMethod\n\n    this.#keyMap = new Map()\n    this.#keyList = new Array(max).fill(undefined)\n    this.#valList = new Array(max).fill(undefined)\n    this.#next = new UintArray(max)\n    this.#prev = new UintArray(max)\n    this.#head = 0 as Index\n    this.#tail = 0 as Index\n    this.#free = Stack.create(max)\n    this.#size = 0\n    this.#calculatedSize = 0\n\n    if (typeof dispose === 'function') {\n      this.#dispose = dispose\n    }\n    if (typeof disposeAfter === 'function') {\n      this.#disposeAfter = disposeAfter\n      this.#disposed = []\n    } else {\n      this.#disposeAfter = undefined\n      this.#disposed = undefined\n    }\n    this.#hasDispose = !!this.#dispose\n    this.#hasDisposeAfter = !!this.#disposeAfter\n\n    this.noDisposeOnSet = !!noDisposeOnSet\n    this.noUpdateTTL = !!noUpdateTTL\n    this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection\n    this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection\n    this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort\n    this.ignoreFetchAbort = !!ignoreFetchAbort\n\n    // NB: maxEntrySize is set to maxSize if it's set\n    if (this.maxEntrySize !== 0) {\n      if (this.#maxSize !== 0) {\n        if (!isPosInt(this.#maxSize)) {\n          throw new TypeError(\n            'maxSize must be a positive integer if specified'\n          )\n        }\n      }\n      if (!isPosInt(this.maxEntrySize)) {\n        throw new TypeError(\n          'maxEntrySize must be a positive integer if specified'\n        )\n      }\n      this.#initializeSizeTracking()\n    }\n\n    this.allowStale = !!allowStale\n    this.noDeleteOnStaleGet = !!noDeleteOnStaleGet\n    this.updateAgeOnGet = !!updateAgeOnGet\n    this.updateAgeOnHas = !!updateAgeOnHas\n    this.ttlResolution =\n      isPosInt(ttlResolution) || ttlResolution === 0\n        ? ttlResolution\n        : 1\n    this.ttlAutopurge = !!ttlAutopurge\n    this.ttl = ttl || 0\n    if (this.ttl) {\n      if (!isPosInt(this.ttl)) {\n        throw new TypeError(\n          'ttl must be a positive integer if specified'\n        )\n      }\n      this.#initializeTTLTracking()\n    }\n\n    // do not allow completely unbounded caches\n    if (this.#max === 0 && this.ttl === 0 && this.#maxSize === 0) {\n      throw new TypeError(\n        'At least one of max, maxSize, or ttl is required'\n      )\n    }\n    if (!this.ttlAutopurge && !this.#max && !this.#maxSize) {\n      const code = 'LRU_CACHE_UNBOUNDED'\n      if (shouldWarn(code)) {\n        warned.add(code)\n        const msg =\n          'TTL caching without ttlAutopurge, max, or maxSize can ' +\n          'result in unbounded memory consumption.'\n        emitWarning(msg, 'UnboundedCacheWarning', code, LRUCache)\n      }\n    }\n  }\n\n  /**\n   * Return the remaining TTL time for a given entry key\n   */\n  getRemainingTTL(key: K) {\n    return this.#keyMap.has(key) ? Infinity : 0\n  }\n\n  #initializeTTLTracking() {\n    const ttls = new ZeroArray(this.#max)\n    const starts = new ZeroArray(this.#max)\n    this.#ttls = ttls\n    this.#starts = starts\n\n    this.#setItemTTL = (index, ttl, start = perf.now()) => {\n      starts[index] = ttl !== 0 ? start : 0\n      ttls[index] = ttl\n      if (ttl !== 0 && this.ttlAutopurge) {\n        const t = setTimeout(() => {\n          if (this.#isStale(index)) {\n            this.delete(this.#keyList[index] as K)\n          }\n        }, ttl + 1)\n        // unref() not supported on all platforms\n        /* c8 ignore start */\n        if (t.unref) {\n          t.unref()\n        }\n        /* c8 ignore stop */\n      }\n    }\n\n    this.#updateItemAge = index => {\n      starts[index] = ttls[index] !== 0 ? perf.now() : 0\n    }\n\n    this.#statusTTL = (status, index) => {\n      if (ttls[index]) {\n        const ttl = ttls[index]\n        const start = starts[index]\n        /* c8 ignore next */\n        if (!ttl || !start) return\n        status.ttl = ttl\n        status.start = start\n        status.now = cachedNow || getNow()\n        const age = status.now - start\n        status.remainingTTL = ttl - age\n      }\n    }\n\n    // debounce calls to perf.now() to 1s so we're not hitting\n    // that costly call repeatedly.\n    let cachedNow = 0\n    const getNow = () => {\n      const n = perf.now()\n      if (this.ttlResolution > 0) {\n        cachedNow = n\n        const t = setTimeout(\n          () => (cachedNow = 0),\n          this.ttlResolution\n        )\n        // not available on all platforms\n        /* c8 ignore start */\n        if (t.unref) {\n          t.unref()\n        }\n        /* c8 ignore stop */\n      }\n      return n\n    }\n\n    this.getRemainingTTL = key => {\n      const index = this.#keyMap.get(key)\n      if (index === undefined) {\n        return 0\n      }\n      const ttl = ttls[index]\n      const start = starts[index]\n      if (!ttl || !start) {\n        return Infinity\n      }\n      const age = (cachedNow || getNow()) - start\n      return ttl - age\n    }\n\n    this.#isStale = index => {\n      const s = starts[index]\n      const t = ttls[index]\n      return !!t && !!s && (cachedNow || getNow()) - s > t\n    }\n  }\n\n  // conditionally set private methods related to TTL\n  #updateItemAge: (index: Index) => void = () => {}\n  #statusTTL: (status: LRUCache.Status<V>, index: Index) => void =\n    () => {}\n  #setItemTTL: (\n    index: Index,\n    ttl: LRUCache.Milliseconds,\n    start?: LRUCache.Milliseconds\n    // ignore because we never call this if we're not already in TTL mode\n    /* c8 ignore start */\n  ) => void = () => {}\n  /* c8 ignore stop */\n\n  #isStale: (index: Index) => boolean = () => false\n\n  #initializeSizeTracking() {\n    const sizes = new ZeroArray(this.#max)\n    this.#calculatedSize = 0\n    this.#sizes = sizes\n    this.#removeItemSize = index => {\n      this.#calculatedSize -= sizes[index] as number\n      sizes[index] = 0\n    }\n    this.#requireSize = (k, v, size, sizeCalculation) => {\n      // provisionally accept background fetches.\n      // actual value size will be checked when they return.\n      if (this.#isBackgroundFetch(v)) {\n        return 0\n      }\n      if (!isPosInt(size)) {\n        if (sizeCalculation) {\n          if (typeof sizeCalculation !== 'function') {\n            throw new TypeError('sizeCalculation must be a function')\n          }\n          size = sizeCalculation(v, k)\n          if (!isPosInt(size)) {\n            throw new TypeError(\n              'sizeCalculation return invalid (expect positive integer)'\n            )\n          }\n        } else {\n          throw new TypeError(\n            'invalid size value (must be positive integer). ' +\n              'When maxSize or maxEntrySize is used, sizeCalculation ' +\n              'or size must be set.'\n          )\n        }\n      }\n      return size\n    }\n    this.#addItemSize = (\n      index: Index,\n      size: LRUCache.Size,\n      status?: LRUCache.Status<V>\n    ) => {\n      sizes[index] = size\n      if (this.#maxSize) {\n        const maxSize = this.#maxSize - (sizes[index] as number)\n        while (this.#calculatedSize > maxSize) {\n          this.#evict(true)\n        }\n      }\n      this.#calculatedSize += sizes[index] as number\n      if (status) {\n        status.entrySize = size\n        status.totalCalculatedSize = this.#calculatedSize\n      }\n    }\n  }\n\n  #removeItemSize: (index: Index) => void = _i => {}\n  #addItemSize: (\n    index: Index,\n    size: LRUCache.Size,\n    status?: LRUCache.Status<V>\n  ) => void = (_i, _s, _st) => {}\n  #requireSize: (\n    k: K,\n    v: V | BackgroundFetch<V>,\n    size?: LRUCache.Size,\n    sizeCalculation?: LRUCache.SizeCalculator<K, V>\n  ) => LRUCache.Size = (\n    _k: K,\n    _v: V | BackgroundFetch<V>,\n    size?: LRUCache.Size,\n    sizeCalculation?: LRUCache.SizeCalculator<K, V>\n  ) => {\n    if (size || sizeCalculation) {\n      throw new TypeError(\n        'cannot set size without setting maxSize or maxEntrySize on cache'\n      )\n    }\n    return 0\n  };\n\n  *#indexes({ allowStale = this.allowStale } = {}) {\n    if (this.#size) {\n      for (let i = this.#tail; true; ) {\n        if (!this.#isValidIndex(i)) {\n          break\n        }\n        if (allowStale || !this.#isStale(i)) {\n          yield i\n        }\n        if (i === this.#head) {\n          break\n        } else {\n          i = this.#prev[i] as Index\n        }\n      }\n    }\n  }\n\n  *#rindexes({ allowStale = this.allowStale } = {}) {\n    if (this.#size) {\n      for (let i = this.#head; true; ) {\n        if (!this.#isValidIndex(i)) {\n          break\n        }\n        if (allowStale || !this.#isStale(i)) {\n          yield i\n        }\n        if (i === this.#tail) {\n          break\n        } else {\n          i = this.#next[i] as Index\n        }\n      }\n    }\n  }\n\n  #isValidIndex(index: Index) {\n    return (\n      index !== undefined &&\n      this.#keyMap.get(this.#keyList[index] as K) === index\n    )\n  }\n\n  /**\n   * Return a generator yielding `[key, value]` pairs,\n   * in order from most recently used to least recently used.\n   */\n  *entries() {\n    for (const i of this.#indexes()) {\n      if (\n        this.#valList[i] !== undefined &&\n        this.#keyList[i] !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield [this.#keyList[i], this.#valList[i]] as [K, V]\n      }\n    }\n  }\n\n  /**\n   * Inverse order version of {@link LRUCache.entries}\n   *\n   * Return a generator yielding `[key, value]` pairs,\n   * in order from least recently used to most recently used.\n   */\n  *rentries() {\n    for (const i of this.#rindexes()) {\n      if (\n        this.#valList[i] !== undefined &&\n        this.#keyList[i] !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield [this.#keyList[i], this.#valList[i]]\n      }\n    }\n  }\n\n  /**\n   * Return a generator yielding the keys in the cache,\n   * in order from most recently used to least recently used.\n   */\n  *keys() {\n    for (const i of this.#indexes()) {\n      const k = this.#keyList[i]\n      if (\n        k !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield k\n      }\n    }\n  }\n\n  /**\n   * Inverse order version of {@link LRUCache.keys}\n   *\n   * Return a generator yielding the keys in the cache,\n   * in order from least recently used to most recently used.\n   */\n  *rkeys() {\n    for (const i of this.#rindexes()) {\n      const k = this.#keyList[i]\n      if (\n        k !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield k\n      }\n    }\n  }\n\n  /**\n   * Return a generator yielding the values in the cache,\n   * in order from most recently used to least recently used.\n   */\n  *values() {\n    for (const i of this.#indexes()) {\n      const v = this.#valList[i]\n      if (\n        v !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield this.#valList[i] as V\n      }\n    }\n  }\n\n  /**\n   * Inverse order version of {@link LRUCache.values}\n   *\n   * Return a generator yielding the values in the cache,\n   * in order from least recently used to most recently used.\n   */\n  *rvalues() {\n    for (const i of this.#rindexes()) {\n      const v = this.#valList[i]\n      if (\n        v !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield this.#valList[i]\n      }\n    }\n  }\n\n  /**\n   * Iterating over the cache itself yields the same results as\n   * {@link LRUCache.entries}\n   */\n  [Symbol.iterator]() {\n    return this.entries()\n  }\n\n  /**\n   * A String value that is used in the creation of the default string description of an object.\n   * Called by the built-in method Object.prototype.toString.\n   */\n  [Symbol.toStringTag] = 'LRUCache'\n\n  /**\n   * Find a value for which the supplied fn method returns a truthy value,\n   * similar to Array.find().  fn is called as fn(value, key, cache).\n   */\n  find(\n    fn: (v: V, k: K, self: LRUCache<K, V, FC>) => boolean,\n    getOptions: LRUCache.GetOptions<K, V, FC> = {}\n  ) {\n    for (const i of this.#indexes()) {\n      const v = this.#valList[i]\n      const value = this.#isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined) continue\n      if (fn(value, this.#keyList[i] as K, this)) {\n        return this.get(this.#keyList[i] as K, getOptions)\n      }\n    }\n  }\n\n  /**\n   * Call the supplied function on each item in the cache, in order from\n   * most recently used to least recently used.  fn is called as\n   * fn(value, key, cache).  Does not update age or recenty of use.\n   * Does not iterate over stale values.\n   */\n  forEach(\n    fn: (v: V, k: K, self: LRUCache<K, V, FC>) => any,\n    thisp: any = this\n  ) {\n    for (const i of this.#indexes()) {\n      const v = this.#valList[i]\n      const value = this.#isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined) continue\n      fn.call(thisp, value, this.#keyList[i] as K, this)\n    }\n  }\n\n  /**\n   * The same as {@link LRUCache.forEach} but items are iterated over in\n   * reverse order.  (ie, less recently used items are iterated over first.)\n   */\n  rforEach(\n    fn: (v: V, k: K, self: LRUCache<K, V, FC>) => any,\n    thisp: any = this\n  ) {\n    for (const i of this.#rindexes()) {\n      const v = this.#valList[i]\n      const value = this.#isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined) continue\n      fn.call(thisp, value, this.#keyList[i] as K, this)\n    }\n  }\n\n  /**\n   * Delete any stale entries. Returns true if anything was removed,\n   * false otherwise.\n   */\n  purgeStale() {\n    let deleted = false\n    for (const i of this.#rindexes({ allowStale: true })) {\n      if (this.#isStale(i)) {\n        this.delete(this.#keyList[i] as K)\n        deleted = true\n      }\n    }\n    return deleted\n  }\n\n  /**\n   * Get the extended info about a given entry, to get its value, size, and\n   * TTL info simultaneously. Like {@link LRUCache#dump}, but just for a\n   * single key. Always returns stale values, if their info is found in the\n   * cache, so be sure to check for expired TTLs if relevant.\n   */\n  info(key: K): LRUCache.Entry<V> | undefined {\n    const i = this.#keyMap.get(key)\n    if (i === undefined) return undefined\n    const v = this.#valList[i]\n    const value: V | undefined = this.#isBackgroundFetch(v)\n      ? v.__staleWhileFetching\n      : v\n    if (value === undefined) return undefined\n    const entry: LRUCache.Entry<V> = { value }\n    if (this.#ttls && this.#starts) {\n      const ttl = this.#ttls[i]\n      const start = this.#starts[i]\n      if (ttl && start) {\n        const remain = ttl - (perf.now() - start)\n        entry.ttl = remain\n        entry.start = Date.now()\n      }\n    }\n    if (this.#sizes) {\n      entry.size = this.#sizes[i]\n    }\n    return entry\n  }\n\n  /**\n   * Return an array of [key, {@link LRUCache.Entry}] tuples which can be\n   * passed to cache.load()\n   */\n  dump() {\n    const arr: [K, LRUCache.Entry<V>][] = []\n    for (const i of this.#indexes({ allowStale: true })) {\n      const key = this.#keyList[i]\n      const v = this.#valList[i]\n      const value: V | undefined = this.#isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined || key === undefined) continue\n      const entry: LRUCache.Entry<V> = { value }\n      if (this.#ttls && this.#starts) {\n        entry.ttl = this.#ttls[i]\n        // always dump the start relative to a portable timestamp\n        // it's ok for this to be a bit slow, it's a rare operation.\n        const age = perf.now() - (this.#starts[i] as number)\n        entry.start = Math.floor(Date.now() - age)\n      }\n      if (this.#sizes) {\n        entry.size = this.#sizes[i]\n      }\n      arr.unshift([key, entry])\n    }\n    return arr\n  }\n\n  /**\n   * Reset the cache and load in the items in entries in the order listed.\n   * Note that the shape of the resulting cache may be different if the\n   * same options are not used in both caches.\n   */\n  load(arr: [K, LRUCache.Entry<V>][]) {\n    this.clear()\n    for (const [key, entry] of arr) {\n      if (entry.start) {\n        // entry.start is a portable timestamp, but we may be using\n        // node's performance.now(), so calculate the offset, so that\n        // we get the intended remaining TTL, no matter how long it's\n        // been on ice.\n        //\n        // it's ok for this to be a bit slow, it's a rare operation.\n        const age = Date.now() - entry.start\n        entry.start = perf.now() - age\n      }\n      this.set(key, entry.value, entry)\n    }\n  }\n\n  /**\n   * Add a value to the cache.\n   *\n   * Note: if `undefined` is specified as a value, this is an alias for\n   * {@link LRUCache#delete}\n   */\n  set(\n    k: K,\n    v: V | BackgroundFetch<V> | undefined,\n    setOptions: LRUCache.SetOptions<K, V, FC> = {}\n  ) {\n    if (v === undefined) {\n      this.delete(k)\n      return this\n    }\n    const {\n      ttl = this.ttl,\n      start,\n      noDisposeOnSet = this.noDisposeOnSet,\n      sizeCalculation = this.sizeCalculation,\n      status,\n    } = setOptions\n    let { noUpdateTTL = this.noUpdateTTL } = setOptions\n\n    const size = this.#requireSize(\n      k,\n      v,\n      setOptions.size || 0,\n      sizeCalculation\n    )\n    // if the item doesn't fit, don't do anything\n    // NB: maxEntrySize set to maxSize by default\n    if (this.maxEntrySize && size > this.maxEntrySize) {\n      if (status) {\n        status.set = 'miss'\n        status.maxEntrySizeExceeded = true\n      }\n      // have to delete, in case something is there already.\n      this.delete(k)\n      return this\n    }\n    let index = this.#size === 0 ? undefined : this.#keyMap.get(k)\n    if (index === undefined) {\n      // addition\n      index = (\n        this.#size === 0\n          ? this.#tail\n          : this.#free.length !== 0\n          ? this.#free.pop()\n          : this.#size === this.#max\n          ? this.#evict(false)\n          : this.#size\n      ) as Index\n      this.#keyList[index] = k\n      this.#valList[index] = v\n      this.#keyMap.set(k, index)\n      this.#next[this.#tail] = index\n      this.#prev[index] = this.#tail\n      this.#tail = index\n      this.#size++\n      this.#addItemSize(index, size, status)\n      if (status) status.set = 'add'\n      noUpdateTTL = false\n    } else {\n      // update\n      this.#moveToTail(index)\n      const oldVal = this.#valList[index] as V | BackgroundFetch<V>\n      if (v !== oldVal) {\n        if (this.#hasFetchMethod && this.#isBackgroundFetch(oldVal)) {\n          oldVal.__abortController.abort(new Error('replaced'))\n          const { __staleWhileFetching: s } = oldVal\n          if (s !== undefined && !noDisposeOnSet) {\n            if (this.#hasDispose) {\n              this.#dispose?.(s as V, k, 'set')\n            }\n            if (this.#hasDisposeAfter) {\n              this.#disposed?.push([s as V, k, 'set'])\n            }\n          }\n        } else if (!noDisposeOnSet) {\n          if (this.#hasDispose) {\n            this.#dispose?.(oldVal as V, k, 'set')\n          }\n          if (this.#hasDisposeAfter) {\n            this.#disposed?.push([oldVal as V, k, 'set'])\n          }\n        }\n        this.#removeItemSize(index)\n        this.#addItemSize(index, size, status)\n        this.#valList[index] = v\n        if (status) {\n          status.set = 'replace'\n          const oldValue =\n            oldVal && this.#isBackgroundFetch(oldVal)\n              ? oldVal.__staleWhileFetching\n              : oldVal\n          if (oldValue !== undefined) status.oldValue = oldValue\n        }\n      } else if (status) {\n        status.set = 'update'\n      }\n    }\n    if (ttl !== 0 && !this.#ttls) {\n      this.#initializeTTLTracking()\n    }\n    if (this.#ttls) {\n      if (!noUpdateTTL) {\n        this.#setItemTTL(index, ttl, start)\n      }\n      if (status) this.#statusTTL(status, index)\n    }\n    if (!noDisposeOnSet && this.#hasDisposeAfter && this.#disposed) {\n      const dt = this.#disposed\n      let task: DisposeTask<K, V> | undefined\n      while ((task = dt?.shift())) {\n        this.#disposeAfter?.(...task)\n      }\n    }\n    return this\n  }\n\n  /**\n   * Evict the least recently used item, returning its value or\n   * `undefined` if cache is empty.\n   */\n  pop(): V | undefined {\n    try {\n      while (this.#size) {\n        const val = this.#valList[this.#head]\n        this.#evict(true)\n        if (this.#isBackgroundFetch(val)) {\n          if (val.__staleWhileFetching) {\n            return val.__staleWhileFetching\n          }\n        } else if (val !== undefined) {\n          return val\n        }\n      }\n    } finally {\n      if (this.#hasDisposeAfter && this.#disposed) {\n        const dt = this.#disposed\n        let task: DisposeTask<K, V> | undefined\n        while ((task = dt?.shift())) {\n          this.#disposeAfter?.(...task)\n        }\n      }\n    }\n  }\n\n  #evict(free: boolean) {\n    const head = this.#head\n    const k = this.#keyList[head] as K\n    const v = this.#valList[head] as V\n    if (this.#hasFetchMethod && this.#isBackgroundFetch(v)) {\n      v.__abortController.abort(new Error('evicted'))\n    } else if (this.#hasDispose || this.#hasDisposeAfter) {\n      if (this.#hasDispose) {\n        this.#dispose?.(v, k, 'evict')\n      }\n      if (this.#hasDisposeAfter) {\n        this.#disposed?.push([v, k, 'evict'])\n      }\n    }\n    this.#removeItemSize(head)\n    // if we aren't about to use the index, then null these out\n    if (free) {\n      this.#keyList[head] = undefined\n      this.#valList[head] = undefined\n      this.#free.push(head)\n    }\n    if (this.#size === 1) {\n      this.#head = this.#tail = 0 as Index\n      this.#free.length = 0\n    } else {\n      this.#head = this.#next[head] as Index\n    }\n    this.#keyMap.delete(k)\n    this.#size--\n    return head\n  }\n\n  /**\n   * Check if a key is in the cache, without updating the recency of use.\n   * Will return false if the item is stale, even though it is technically\n   * in the cache.\n   *\n   * Will not update item age unless\n   * {@link LRUCache.OptionsBase.updateAgeOnHas} is set.\n   */\n  has(k: K, hasOptions: LRUCache.HasOptions<K, V, FC> = {}) {\n    const { updateAgeOnHas = this.updateAgeOnHas, status } =\n      hasOptions\n    const index = this.#keyMap.get(k)\n    if (index !== undefined) {\n      const v = this.#valList[index]\n      if (\n        this.#isBackgroundFetch(v) &&\n        v.__staleWhileFetching === undefined\n      ) {\n        return false\n      }\n      if (!this.#isStale(index)) {\n        if (updateAgeOnHas) {\n          this.#updateItemAge(index)\n        }\n        if (status) {\n          status.has = 'hit'\n          this.#statusTTL(status, index)\n        }\n        return true\n      } else if (status) {\n        status.has = 'stale'\n        this.#statusTTL(status, index)\n      }\n    } else if (status) {\n      status.has = 'miss'\n    }\n    return false\n  }\n\n  /**\n   * Like {@link LRUCache#get} but doesn't update recency or delete stale\n   * items.\n   *\n   * Returns `undefined` if the item is stale, unless\n   * {@link LRUCache.OptionsBase.allowStale} is set.\n   */\n  peek(k: K, peekOptions: LRUCache.PeekOptions<K, V, FC> = {}) {\n    const { allowStale = this.allowStale } = peekOptions\n    const index = this.#keyMap.get(k)\n    if (\n      index === undefined ||\n      (!allowStale && this.#isStale(index))\n    ) {\n      return\n    }\n    const v = this.#valList[index]\n    // either stale and allowed, or forcing a refresh of non-stale value\n    return this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v\n  }\n\n  #backgroundFetch(\n    k: K,\n    index: Index | undefined,\n    options: LRUCache.FetchOptions<K, V, FC>,\n    context: any\n  ): BackgroundFetch<V> {\n    const v = index === undefined ? undefined : this.#valList[index]\n    if (this.#isBackgroundFetch(v)) {\n      return v\n    }\n\n    const ac = new AC()\n    const { signal } = options\n    // when/if our AC signals, then stop listening to theirs.\n    signal?.addEventListener('abort', () => ac.abort(signal.reason), {\n      signal: ac.signal,\n    })\n\n    const fetchOpts = {\n      signal: ac.signal,\n      options,\n      context,\n    }\n\n    const cb = (\n      v: V | undefined,\n      updateCache = false\n    ): V | undefined => {\n      const { aborted } = ac.signal\n      const ignoreAbort = options.ignoreFetchAbort && v !== undefined\n      if (options.status) {\n        if (aborted && !updateCache) {\n          options.status.fetchAborted = true\n          options.status.fetchError = ac.signal.reason\n          if (ignoreAbort) options.status.fetchAbortIgnored = true\n        } else {\n          options.status.fetchResolved = true\n        }\n      }\n      if (aborted && !ignoreAbort && !updateCache) {\n        return fetchFail(ac.signal.reason)\n      }\n      // either we didn't abort, and are still here, or we did, and ignored\n      const bf = p as BackgroundFetch<V>\n      if (this.#valList[index as Index] === p) {\n        if (v === undefined) {\n          if (bf.__staleWhileFetching) {\n            this.#valList[index as Index] = bf.__staleWhileFetching\n          } else {\n            this.delete(k)\n          }\n        } else {\n          if (options.status) options.status.fetchUpdated = true\n          this.set(k, v, fetchOpts.options)\n        }\n      }\n      return v\n    }\n\n    const eb = (er: any) => {\n      if (options.status) {\n        options.status.fetchRejected = true\n        options.status.fetchError = er\n      }\n      return fetchFail(er)\n    }\n\n    const fetchFail = (er: any): V | undefined => {\n      const { aborted } = ac.signal\n      const allowStaleAborted =\n        aborted && options.allowStaleOnFetchAbort\n      const allowStale =\n        allowStaleAborted || options.allowStaleOnFetchRejection\n      const noDelete = allowStale || options.noDeleteOnFetchRejection\n      const bf = p as BackgroundFetch<V>\n      if (this.#valList[index as Index] === p) {\n        // if we allow stale on fetch rejections, then we need to ensure that\n        // the stale value is not removed from the cache when the fetch fails.\n        const del = !noDelete || bf.__staleWhileFetching === undefined\n        if (del) {\n          this.delete(k)\n        } else if (!allowStaleAborted) {\n          // still replace the *promise* with the stale value,\n          // since we are done with the promise at this point.\n          // leave it untouched if we're still waiting for an\n          // aborted background fetch that hasn't yet returned.\n          this.#valList[index as Index] = bf.__staleWhileFetching\n        }\n      }\n      if (allowStale) {\n        if (options.status && bf.__staleWhileFetching !== undefined) {\n          options.status.returnedStale = true\n        }\n        return bf.__staleWhileFetching\n      } else if (bf.__returned === bf) {\n        throw er\n      }\n    }\n\n    const pcall = (\n      res: (v: V | undefined) => void,\n      rej: (e: any) => void\n    ) => {\n      const fmp = this.#fetchMethod?.(k, v, fetchOpts)\n      if (fmp && fmp instanceof Promise) {\n        fmp.then(v => res(v === undefined ? undefined : v), rej)\n      }\n      // ignored, we go until we finish, regardless.\n      // defer check until we are actually aborting,\n      // so fetchMethod can override.\n      ac.signal.addEventListener('abort', () => {\n        if (\n          !options.ignoreFetchAbort ||\n          options.allowStaleOnFetchAbort\n        ) {\n          res(undefined)\n          // when it eventually resolves, update the cache.\n          if (options.allowStaleOnFetchAbort) {\n            res = v => cb(v, true)\n          }\n        }\n      })\n    }\n\n    if (options.status) options.status.fetchDispatched = true\n    const p = new Promise(pcall).then(cb, eb)\n    const bf: BackgroundFetch<V> = Object.assign(p, {\n      __abortController: ac,\n      __staleWhileFetching: v,\n      __returned: undefined,\n    })\n\n    if (index === undefined) {\n      // internal, don't expose status.\n      this.set(k, bf, { ...fetchOpts.options, status: undefined })\n      index = this.#keyMap.get(k)\n    } else {\n      this.#valList[index] = bf\n    }\n    return bf\n  }\n\n  #isBackgroundFetch(p: any): p is BackgroundFetch<V> {\n    if (!this.#hasFetchMethod) return false\n    const b = p as BackgroundFetch<V>\n    return (\n      !!b &&\n      b instanceof Promise &&\n      b.hasOwnProperty('__staleWhileFetching') &&\n      b.__abortController instanceof AC\n    )\n  }\n\n  /**\n   * Make an asynchronous cached fetch using the\n   * {@link LRUCache.OptionsBase.fetchMethod} function.\n   *\n   * If multiple fetches for the same key are issued, then they will all be\n   * coalesced into a single call to fetchMethod.\n   *\n   * Note that this means that handling options such as\n   * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort},\n   * {@link LRUCache.FetchOptions.signal},\n   * and {@link LRUCache.OptionsBase.allowStaleOnFetchRejection} will be\n   * determined by the FIRST fetch() call for a given key.\n   *\n   * This is a known (fixable) shortcoming which will be addresed on when\n   * someone complains about it, as the fix would involve added complexity and\n   * may not be worth the costs for this edge case.\n   */\n  fetch(\n    k: K,\n    fetchOptions: unknown extends FC\n      ? LRUCache.FetchOptions<K, V, FC>\n      : FC extends undefined | void\n      ? LRUCache.FetchOptionsNoContext<K, V>\n      : LRUCache.FetchOptionsWithContext<K, V, FC>\n  ): Promise<undefined | V>\n  // this overload not allowed if context is required\n  fetch(\n    k: unknown extends FC\n      ? K\n      : FC extends undefined | void\n      ? K\n      : never,\n    fetchOptions?: unknown extends FC\n      ? LRUCache.FetchOptions<K, V, FC>\n      : FC extends undefined | void\n      ? LRUCache.FetchOptionsNoContext<K, V>\n      : never\n  ): Promise<undefined | V>\n  async fetch(\n    k: K,\n    fetchOptions: LRUCache.FetchOptions<K, V, FC> = {}\n  ): Promise<undefined | V> {\n    const {\n      // get options\n      allowStale = this.allowStale,\n      updateAgeOnGet = this.updateAgeOnGet,\n      noDeleteOnStaleGet = this.noDeleteOnStaleGet,\n      // set options\n      ttl = this.ttl,\n      noDisposeOnSet = this.noDisposeOnSet,\n      size = 0,\n      sizeCalculation = this.sizeCalculation,\n      noUpdateTTL = this.noUpdateTTL,\n      // fetch exclusive options\n      noDeleteOnFetchRejection = this.noDeleteOnFetchRejection,\n      allowStaleOnFetchRejection = this.allowStaleOnFetchRejection,\n      ignoreFetchAbort = this.ignoreFetchAbort,\n      allowStaleOnFetchAbort = this.allowStaleOnFetchAbort,\n      context,\n      forceRefresh = false,\n      status,\n      signal,\n    } = fetchOptions\n\n    if (!this.#hasFetchMethod) {\n      if (status) status.fetch = 'get'\n      return this.get(k, {\n        allowStale,\n        updateAgeOnGet,\n        noDeleteOnStaleGet,\n        status,\n      })\n    }\n\n    const options = {\n      allowStale,\n      updateAgeOnGet,\n      noDeleteOnStaleGet,\n      ttl,\n      noDisposeOnSet,\n      size,\n      sizeCalculation,\n      noUpdateTTL,\n      noDeleteOnFetchRejection,\n      allowStaleOnFetchRejection,\n      allowStaleOnFetchAbort,\n      ignoreFetchAbort,\n      status,\n      signal,\n    }\n\n    let index = this.#keyMap.get(k)\n    if (index === undefined) {\n      if (status) status.fetch = 'miss'\n      const p = this.#backgroundFetch(k, index, options, context)\n      return (p.__returned = p)\n    } else {\n      // in cache, maybe already fetching\n      const v = this.#valList[index]\n      if (this.#isBackgroundFetch(v)) {\n        const stale =\n          allowStale && v.__staleWhileFetching !== undefined\n        if (status) {\n          status.fetch = 'inflight'\n          if (stale) status.returnedStale = true\n        }\n        return stale ? v.__staleWhileFetching : (v.__returned = v)\n      }\n\n      // if we force a refresh, that means do NOT serve the cached value,\n      // unless we are already in the process of refreshing the cache.\n      const isStale = this.#isStale(index)\n      if (!forceRefresh && !isStale) {\n        if (status) status.fetch = 'hit'\n        this.#moveToTail(index)\n        if (updateAgeOnGet) {\n          this.#updateItemAge(index)\n        }\n        if (status) this.#statusTTL(status, index)\n        return v\n      }\n\n      // ok, it is stale or a forced refresh, and not already fetching.\n      // refresh the cache.\n      const p = this.#backgroundFetch(k, index, options, context)\n      const hasStale = p.__staleWhileFetching !== undefined\n      const staleVal = hasStale && allowStale\n      if (status) {\n        status.fetch = isStale ? 'stale' : 'refresh'\n        if (staleVal && isStale) status.returnedStale = true\n      }\n      return staleVal ? p.__staleWhileFetching : (p.__returned = p)\n    }\n  }\n\n  /**\n   * Return a value from the cache. Will update the recency of the cache\n   * entry found.\n   *\n   * If the key is not found, get() will return `undefined`.\n   */\n  get(k: K, getOptions: LRUCache.GetOptions<K, V, FC> = {}) {\n    const {\n      allowStale = this.allowStale,\n      updateAgeOnGet = this.updateAgeOnGet,\n      noDeleteOnStaleGet = this.noDeleteOnStaleGet,\n      status,\n    } = getOptions\n    const index = this.#keyMap.get(k)\n    if (index !== undefined) {\n      const value = this.#valList[index]\n      const fetching = this.#isBackgroundFetch(value)\n      if (status) this.#statusTTL(status, index)\n      if (this.#isStale(index)) {\n        if (status) status.get = 'stale'\n        // delete only if not an in-flight background fetch\n        if (!fetching) {\n          if (!noDeleteOnStaleGet) {\n            this.delete(k)\n          }\n          if (status && allowStale) status.returnedStale = true\n          return allowStale ? value : undefined\n        } else {\n          if (\n            status &&\n            allowStale &&\n            value.__staleWhileFetching !== undefined\n          ) {\n            status.returnedStale = true\n          }\n          return allowStale ? value.__staleWhileFetching : undefined\n        }\n      } else {\n        if (status) status.get = 'hit'\n        // if we're currently fetching it, we don't actually have it yet\n        // it's not stale, which means this isn't a staleWhileRefetching.\n        // If it's not stale, and fetching, AND has a __staleWhileFetching\n        // value, then that means the user fetched with {forceRefresh:true},\n        // so it's safe to return that value.\n        if (fetching) {\n          return value.__staleWhileFetching\n        }\n        this.#moveToTail(index)\n        if (updateAgeOnGet) {\n          this.#updateItemAge(index)\n        }\n        return value\n      }\n    } else if (status) {\n      status.get = 'miss'\n    }\n  }\n\n  #connect(p: Index, n: Index) {\n    this.#prev[n] = p\n    this.#next[p] = n\n  }\n\n  #moveToTail(index: Index): void {\n    // if tail already, nothing to do\n    // if head, move head to next[index]\n    // else\n    //   move next[prev[index]] to next[index] (head has no prev)\n    //   move prev[next[index]] to prev[index]\n    // prev[index] = tail\n    // next[tail] = index\n    // tail = index\n    if (index !== this.#tail) {\n      if (index === this.#head) {\n        this.#head = this.#next[index] as Index\n      } else {\n        this.#connect(\n          this.#prev[index] as Index,\n          this.#next[index] as Index\n        )\n      }\n      this.#connect(this.#tail, index)\n      this.#tail = index\n    }\n  }\n\n  /**\n   * Deletes a key out of the cache.\n   * Returns true if the key was deleted, false otherwise.\n   */\n  delete(k: K) {\n    let deleted = false\n    if (this.#size !== 0) {\n      const index = this.#keyMap.get(k)\n      if (index !== undefined) {\n        deleted = true\n        if (this.#size === 1) {\n          this.clear()\n        } else {\n          this.#removeItemSize(index)\n          const v = this.#valList[index]\n          if (this.#isBackgroundFetch(v)) {\n            v.__abortController.abort(new Error('deleted'))\n          } else if (this.#hasDispose || this.#hasDisposeAfter) {\n            if (this.#hasDispose) {\n              this.#dispose?.(v as V, k, 'delete')\n            }\n            if (this.#hasDisposeAfter) {\n              this.#disposed?.push([v as V, k, 'delete'])\n            }\n          }\n          this.#keyMap.delete(k)\n          this.#keyList[index] = undefined\n          this.#valList[index] = undefined\n          if (index === this.#tail) {\n            this.#tail = this.#prev[index] as Index\n          } else if (index === this.#head) {\n            this.#head = this.#next[index] as Index\n          } else {\n            const pi = this.#prev[index] as number\n            this.#next[pi] = this.#next[index] as number\n            const ni = this.#next[index] as number\n            this.#prev[ni] = this.#prev[index] as number\n          }\n          this.#size--\n          this.#free.push(index)\n        }\n      }\n    }\n    if (this.#hasDisposeAfter && this.#disposed?.length) {\n      const dt = this.#disposed\n      let task: DisposeTask<K, V> | undefined\n      while ((task = dt?.shift())) {\n        this.#disposeAfter?.(...task)\n      }\n    }\n    return deleted\n  }\n\n  /**\n   * Clear the cache entirely, throwing away all values.\n   */\n  clear() {\n    for (const index of this.#rindexes({ allowStale: true })) {\n      const v = this.#valList[index]\n      if (this.#isBackgroundFetch(v)) {\n        v.__abortController.abort(new Error('deleted'))\n      } else {\n        const k = this.#keyList[index]\n        if (this.#hasDispose) {\n          this.#dispose?.(v as V, k as K, 'delete')\n        }\n        if (this.#hasDisposeAfter) {\n          this.#disposed?.push([v as V, k as K, 'delete'])\n        }\n      }\n    }\n\n    this.#keyMap.clear()\n    this.#valList.fill(undefined)\n    this.#keyList.fill(undefined)\n    if (this.#ttls && this.#starts) {\n      this.#ttls.fill(0)\n      this.#starts.fill(0)\n    }\n    if (this.#sizes) {\n      this.#sizes.fill(0)\n    }\n    this.#head = 0 as Index\n    this.#tail = 0 as Index\n    this.#free.length = 0\n    this.#calculatedSize = 0\n    this.#size = 0\n    if (this.#hasDisposeAfter && this.#disposed) {\n      const dt = this.#disposed\n      let task: DisposeTask<K, V> | undefined\n      while ((task = dt?.shift())) {\n        this.#disposeAfter?.(...task)\n      }\n    }\n  }\n}\n",null],"names":[],"mappings":"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"}},
    {"offset": {"line": 2527, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2531, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/named-placeholders/node_modules/lru-cache/index.js"],"sourcesContent":["const perf =\n  typeof performance === 'object' &&\n  performance &&\n  typeof performance.now === 'function'\n    ? performance\n    : Date\n\nconst hasAbortController = typeof AbortController === 'function'\n\n// minimal backwards-compatibility polyfill\n// this doesn't have nearly all the checks and whatnot that\n// actual AbortController/Signal has, but it's enough for\n// our purposes, and if used properly, behaves the same.\nconst AC = hasAbortController\n  ? AbortController\n  : class AbortController {\n      constructor() {\n        this.signal = new AS()\n      }\n      abort(reason = new Error('This operation was aborted')) {\n        this.signal.reason = this.signal.reason || reason\n        this.signal.aborted = true\n        this.signal.dispatchEvent({\n          type: 'abort',\n          target: this.signal,\n        })\n      }\n    }\n\nconst hasAbortSignal = typeof AbortSignal === 'function'\n// Some polyfills put this on the AC class, not global\nconst hasACAbortSignal = typeof AC.AbortSignal === 'function'\nconst AS = hasAbortSignal\n  ? AbortSignal\n  : hasACAbortSignal\n  ? AC.AbortController\n  : class AbortSignal {\n      constructor() {\n        this.reason = undefined\n        this.aborted = false\n        this._listeners = []\n      }\n      dispatchEvent(e) {\n        if (e.type === 'abort') {\n          this.aborted = true\n          this.onabort(e)\n          this._listeners.forEach(f => f(e), this)\n        }\n      }\n      onabort() {}\n      addEventListener(ev, fn) {\n        if (ev === 'abort') {\n          this._listeners.push(fn)\n        }\n      }\n      removeEventListener(ev, fn) {\n        if (ev === 'abort') {\n          this._listeners = this._listeners.filter(f => f !== fn)\n        }\n      }\n    }\n\nconst warned = new Set()\nconst deprecatedOption = (opt, instead) => {\n  const code = `LRU_CACHE_OPTION_${opt}`\n  if (shouldWarn(code)) {\n    warn(code, `${opt} option`, `options.${instead}`, LRUCache)\n  }\n}\nconst deprecatedMethod = (method, instead) => {\n  const code = `LRU_CACHE_METHOD_${method}`\n  if (shouldWarn(code)) {\n    const { prototype } = LRUCache\n    const { get } = Object.getOwnPropertyDescriptor(prototype, method)\n    warn(code, `${method} method`, `cache.${instead}()`, get)\n  }\n}\nconst deprecatedProperty = (field, instead) => {\n  const code = `LRU_CACHE_PROPERTY_${field}`\n  if (shouldWarn(code)) {\n    const { prototype } = LRUCache\n    const { get } = Object.getOwnPropertyDescriptor(prototype, field)\n    warn(code, `${field} property`, `cache.${instead}`, get)\n  }\n}\n\nconst emitWarning = (...a) => {\n  typeof process === 'object' &&\n  process &&\n  typeof process.emitWarning === 'function'\n    ? process.emitWarning(...a)\n    : console.error(...a)\n}\n\nconst shouldWarn = code => !warned.has(code)\n\nconst warn = (code, what, instead, fn) => {\n  warned.add(code)\n  const msg = `The ${what} is deprecated. Please use ${instead} instead.`\n  emitWarning(msg, 'DeprecationWarning', code, fn)\n}\n\nconst isPosInt = n => n && n === Math.floor(n) && n > 0 && isFinite(n)\n\n/* istanbul ignore next - This is a little bit ridiculous, tbh.\n * The maximum array length is 2^32-1 or thereabouts on most JS impls.\n * And well before that point, you're caching the entire world, I mean,\n * that's ~32GB of just integers for the next/prev links, plus whatever\n * else to hold that many keys and values.  Just filling the memory with\n * zeroes at init time is brutal when you get that big.\n * But why not be complete?\n * Maybe in the future, these limits will have expanded. */\nconst getUintArray = max =>\n  !isPosInt(max)\n    ? null\n    : max <= Math.pow(2, 8)\n    ? Uint8Array\n    : max <= Math.pow(2, 16)\n    ? Uint16Array\n    : max <= Math.pow(2, 32)\n    ? Uint32Array\n    : max <= Number.MAX_SAFE_INTEGER\n    ? ZeroArray\n    : null\n\nclass ZeroArray extends Array {\n  constructor(size) {\n    super(size)\n    this.fill(0)\n  }\n}\n\nclass Stack {\n  constructor(max) {\n    if (max === 0) {\n      return []\n    }\n    const UintArray = getUintArray(max)\n    this.heap = new UintArray(max)\n    this.length = 0\n  }\n  push(n) {\n    this.heap[this.length++] = n\n  }\n  pop() {\n    return this.heap[--this.length]\n  }\n}\n\nclass LRUCache {\n  constructor(options = {}) {\n    const {\n      max = 0,\n      ttl,\n      ttlResolution = 1,\n      ttlAutopurge,\n      updateAgeOnGet,\n      updateAgeOnHas,\n      allowStale,\n      dispose,\n      disposeAfter,\n      noDisposeOnSet,\n      noUpdateTTL,\n      maxSize = 0,\n      maxEntrySize = 0,\n      sizeCalculation,\n      fetchMethod,\n      fetchContext,\n      noDeleteOnFetchRejection,\n      noDeleteOnStaleGet,\n      allowStaleOnFetchRejection,\n      allowStaleOnFetchAbort,\n      ignoreFetchAbort,\n    } = options\n\n    // deprecated options, don't trigger a warning for getting them if\n    // the thing being passed in is another LRUCache we're copying.\n    const { length, maxAge, stale } =\n      options instanceof LRUCache ? {} : options\n\n    if (max !== 0 && !isPosInt(max)) {\n      throw new TypeError('max option must be a nonnegative integer')\n    }\n\n    const UintArray = max ? getUintArray(max) : Array\n    if (!UintArray) {\n      throw new Error('invalid max value: ' + max)\n    }\n\n    this.max = max\n    this.maxSize = maxSize\n    this.maxEntrySize = maxEntrySize || this.maxSize\n    this.sizeCalculation = sizeCalculation || length\n    if (this.sizeCalculation) {\n      if (!this.maxSize && !this.maxEntrySize) {\n        throw new TypeError(\n          'cannot set sizeCalculation without setting maxSize or maxEntrySize'\n        )\n      }\n      if (typeof this.sizeCalculation !== 'function') {\n        throw new TypeError('sizeCalculation set to non-function')\n      }\n    }\n\n    this.fetchMethod = fetchMethod || null\n    if (this.fetchMethod && typeof this.fetchMethod !== 'function') {\n      throw new TypeError(\n        'fetchMethod must be a function if specified'\n      )\n    }\n\n    this.fetchContext = fetchContext\n    if (!this.fetchMethod && fetchContext !== undefined) {\n      throw new TypeError(\n        'cannot set fetchContext without fetchMethod'\n      )\n    }\n\n    this.keyMap = new Map()\n    this.keyList = new Array(max).fill(null)\n    this.valList = new Array(max).fill(null)\n    this.next = new UintArray(max)\n    this.prev = new UintArray(max)\n    this.head = 0\n    this.tail = 0\n    this.free = new Stack(max)\n    this.initialFill = 1\n    this.size = 0\n\n    if (typeof dispose === 'function') {\n      this.dispose = dispose\n    }\n    if (typeof disposeAfter === 'function') {\n      this.disposeAfter = disposeAfter\n      this.disposed = []\n    } else {\n      this.disposeAfter = null\n      this.disposed = null\n    }\n    this.noDisposeOnSet = !!noDisposeOnSet\n    this.noUpdateTTL = !!noUpdateTTL\n    this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection\n    this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection\n    this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort\n    this.ignoreFetchAbort = !!ignoreFetchAbort\n\n    // NB: maxEntrySize is set to maxSize if it's set\n    if (this.maxEntrySize !== 0) {\n      if (this.maxSize !== 0) {\n        if (!isPosInt(this.maxSize)) {\n          throw new TypeError(\n            'maxSize must be a positive integer if specified'\n          )\n        }\n      }\n      if (!isPosInt(this.maxEntrySize)) {\n        throw new TypeError(\n          'maxEntrySize must be a positive integer if specified'\n        )\n      }\n      this.initializeSizeTracking()\n    }\n\n    this.allowStale = !!allowStale || !!stale\n    this.noDeleteOnStaleGet = !!noDeleteOnStaleGet\n    this.updateAgeOnGet = !!updateAgeOnGet\n    this.updateAgeOnHas = !!updateAgeOnHas\n    this.ttlResolution =\n      isPosInt(ttlResolution) || ttlResolution === 0\n        ? ttlResolution\n        : 1\n    this.ttlAutopurge = !!ttlAutopurge\n    this.ttl = ttl || maxAge || 0\n    if (this.ttl) {\n      if (!isPosInt(this.ttl)) {\n        throw new TypeError(\n          'ttl must be a positive integer if specified'\n        )\n      }\n      this.initializeTTLTracking()\n    }\n\n    // do not allow completely unbounded caches\n    if (this.max === 0 && this.ttl === 0 && this.maxSize === 0) {\n      throw new TypeError(\n        'At least one of max, maxSize, or ttl is required'\n      )\n    }\n    if (!this.ttlAutopurge && !this.max && !this.maxSize) {\n      const code = 'LRU_CACHE_UNBOUNDED'\n      if (shouldWarn(code)) {\n        warned.add(code)\n        const msg =\n          'TTL caching without ttlAutopurge, max, or maxSize can ' +\n          'result in unbounded memory consumption.'\n        emitWarning(msg, 'UnboundedCacheWarning', code, LRUCache)\n      }\n    }\n\n    if (stale) {\n      deprecatedOption('stale', 'allowStale')\n    }\n    if (maxAge) {\n      deprecatedOption('maxAge', 'ttl')\n    }\n    if (length) {\n      deprecatedOption('length', 'sizeCalculation')\n    }\n  }\n\n  getRemainingTTL(key) {\n    return this.has(key, { updateAgeOnHas: false }) ? Infinity : 0\n  }\n\n  initializeTTLTracking() {\n    this.ttls = new ZeroArray(this.max)\n    this.starts = new ZeroArray(this.max)\n\n    this.setItemTTL = (index, ttl, start = perf.now()) => {\n      this.starts[index] = ttl !== 0 ? start : 0\n      this.ttls[index] = ttl\n      if (ttl !== 0 && this.ttlAutopurge) {\n        const t = setTimeout(() => {\n          if (this.isStale(index)) {\n            this.delete(this.keyList[index])\n          }\n        }, ttl + 1)\n        /* istanbul ignore else - unref() not supported on all platforms */\n        if (t.unref) {\n          t.unref()\n        }\n      }\n    }\n\n    this.updateItemAge = index => {\n      this.starts[index] = this.ttls[index] !== 0 ? perf.now() : 0\n    }\n\n    this.statusTTL = (status, index) => {\n      if (status) {\n        status.ttl = this.ttls[index]\n        status.start = this.starts[index]\n        status.now = cachedNow || getNow()\n        status.remainingTTL = status.now + status.ttl - status.start\n      }\n    }\n\n    // debounce calls to perf.now() to 1s so we're not hitting\n    // that costly call repeatedly.\n    let cachedNow = 0\n    const getNow = () => {\n      const n = perf.now()\n      if (this.ttlResolution > 0) {\n        cachedNow = n\n        const t = setTimeout(\n          () => (cachedNow = 0),\n          this.ttlResolution\n        )\n        /* istanbul ignore else - not available on all platforms */\n        if (t.unref) {\n          t.unref()\n        }\n      }\n      return n\n    }\n\n    this.getRemainingTTL = key => {\n      const index = this.keyMap.get(key)\n      if (index === undefined) {\n        return 0\n      }\n      return this.ttls[index] === 0 || this.starts[index] === 0\n        ? Infinity\n        : this.starts[index] +\n            this.ttls[index] -\n            (cachedNow || getNow())\n    }\n\n    this.isStale = index => {\n      return (\n        this.ttls[index] !== 0 &&\n        this.starts[index] !== 0 &&\n        (cachedNow || getNow()) - this.starts[index] >\n          this.ttls[index]\n      )\n    }\n  }\n  updateItemAge(_index) {}\n  statusTTL(_status, _index) {}\n  setItemTTL(_index, _ttl, _start) {}\n  isStale(_index) {\n    return false\n  }\n\n  initializeSizeTracking() {\n    this.calculatedSize = 0\n    this.sizes = new ZeroArray(this.max)\n    this.removeItemSize = index => {\n      this.calculatedSize -= this.sizes[index]\n      this.sizes[index] = 0\n    }\n    this.requireSize = (k, v, size, sizeCalculation) => {\n      // provisionally accept background fetches.\n      // actual value size will be checked when they return.\n      if (this.isBackgroundFetch(v)) {\n        return 0\n      }\n      if (!isPosInt(size)) {\n        if (sizeCalculation) {\n          if (typeof sizeCalculation !== 'function') {\n            throw new TypeError('sizeCalculation must be a function')\n          }\n          size = sizeCalculation(v, k)\n          if (!isPosInt(size)) {\n            throw new TypeError(\n              'sizeCalculation return invalid (expect positive integer)'\n            )\n          }\n        } else {\n          throw new TypeError(\n            'invalid size value (must be positive integer). ' +\n              'When maxSize or maxEntrySize is used, sizeCalculation or size ' +\n              'must be set.'\n          )\n        }\n      }\n      return size\n    }\n    this.addItemSize = (index, size, status) => {\n      this.sizes[index] = size\n      if (this.maxSize) {\n        const maxSize = this.maxSize - this.sizes[index]\n        while (this.calculatedSize > maxSize) {\n          this.evict(true)\n        }\n      }\n      this.calculatedSize += this.sizes[index]\n      if (status) {\n        status.entrySize = size\n        status.totalCalculatedSize = this.calculatedSize\n      }\n    }\n  }\n  removeItemSize(_index) {}\n  addItemSize(_index, _size) {}\n  requireSize(_k, _v, size, sizeCalculation) {\n    if (size || sizeCalculation) {\n      throw new TypeError(\n        'cannot set size without setting maxSize or maxEntrySize on cache'\n      )\n    }\n  }\n\n  *indexes({ allowStale = this.allowStale } = {}) {\n    if (this.size) {\n      for (let i = this.tail; true; ) {\n        if (!this.isValidIndex(i)) {\n          break\n        }\n        if (allowStale || !this.isStale(i)) {\n          yield i\n        }\n        if (i === this.head) {\n          break\n        } else {\n          i = this.prev[i]\n        }\n      }\n    }\n  }\n\n  *rindexes({ allowStale = this.allowStale } = {}) {\n    if (this.size) {\n      for (let i = this.head; true; ) {\n        if (!this.isValidIndex(i)) {\n          break\n        }\n        if (allowStale || !this.isStale(i)) {\n          yield i\n        }\n        if (i === this.tail) {\n          break\n        } else {\n          i = this.next[i]\n        }\n      }\n    }\n  }\n\n  isValidIndex(index) {\n    return (\n      index !== undefined &&\n      this.keyMap.get(this.keyList[index]) === index\n    )\n  }\n\n  *entries() {\n    for (const i of this.indexes()) {\n      if (\n        this.valList[i] !== undefined &&\n        this.keyList[i] !== undefined &&\n        !this.isBackgroundFetch(this.valList[i])\n      ) {\n        yield [this.keyList[i], this.valList[i]]\n      }\n    }\n  }\n  *rentries() {\n    for (const i of this.rindexes()) {\n      if (\n        this.valList[i] !== undefined &&\n        this.keyList[i] !== undefined &&\n        !this.isBackgroundFetch(this.valList[i])\n      ) {\n        yield [this.keyList[i], this.valList[i]]\n      }\n    }\n  }\n\n  *keys() {\n    for (const i of this.indexes()) {\n      if (\n        this.keyList[i] !== undefined &&\n        !this.isBackgroundFetch(this.valList[i])\n      ) {\n        yield this.keyList[i]\n      }\n    }\n  }\n  *rkeys() {\n    for (const i of this.rindexes()) {\n      if (\n        this.keyList[i] !== undefined &&\n        !this.isBackgroundFetch(this.valList[i])\n      ) {\n        yield this.keyList[i]\n      }\n    }\n  }\n\n  *values() {\n    for (const i of this.indexes()) {\n      if (\n        this.valList[i] !== undefined &&\n        !this.isBackgroundFetch(this.valList[i])\n      ) {\n        yield this.valList[i]\n      }\n    }\n  }\n  *rvalues() {\n    for (const i of this.rindexes()) {\n      if (\n        this.valList[i] !== undefined &&\n        !this.isBackgroundFetch(this.valList[i])\n      ) {\n        yield this.valList[i]\n      }\n    }\n  }\n\n  [Symbol.iterator]() {\n    return this.entries()\n  }\n\n  find(fn, getOptions) {\n    for (const i of this.indexes()) {\n      const v = this.valList[i]\n      const value = this.isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined) continue\n      if (fn(value, this.keyList[i], this)) {\n        return this.get(this.keyList[i], getOptions)\n      }\n    }\n  }\n\n  forEach(fn, thisp = this) {\n    for (const i of this.indexes()) {\n      const v = this.valList[i]\n      const value = this.isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined) continue\n      fn.call(thisp, value, this.keyList[i], this)\n    }\n  }\n\n  rforEach(fn, thisp = this) {\n    for (const i of this.rindexes()) {\n      const v = this.valList[i]\n      const value = this.isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined) continue\n      fn.call(thisp, value, this.keyList[i], this)\n    }\n  }\n\n  get prune() {\n    deprecatedMethod('prune', 'purgeStale')\n    return this.purgeStale\n  }\n\n  purgeStale() {\n    let deleted = false\n    for (const i of this.rindexes({ allowStale: true })) {\n      if (this.isStale(i)) {\n        this.delete(this.keyList[i])\n        deleted = true\n      }\n    }\n    return deleted\n  }\n\n  dump() {\n    const arr = []\n    for (const i of this.indexes({ allowStale: true })) {\n      const key = this.keyList[i]\n      const v = this.valList[i]\n      const value = this.isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined) continue\n      const entry = { value }\n      if (this.ttls) {\n        entry.ttl = this.ttls[i]\n        // always dump the start relative to a portable timestamp\n        // it's ok for this to be a bit slow, it's a rare operation.\n        const age = perf.now() - this.starts[i]\n        entry.start = Math.floor(Date.now() - age)\n      }\n      if (this.sizes) {\n        entry.size = this.sizes[i]\n      }\n      arr.unshift([key, entry])\n    }\n    return arr\n  }\n\n  load(arr) {\n    this.clear()\n    for (const [key, entry] of arr) {\n      if (entry.start) {\n        // entry.start is a portable timestamp, but we may be using\n        // node's performance.now(), so calculate the offset.\n        // it's ok for this to be a bit slow, it's a rare operation.\n        const age = Date.now() - entry.start\n        entry.start = perf.now() - age\n      }\n      this.set(key, entry.value, entry)\n    }\n  }\n\n  dispose(_v, _k, _reason) {}\n\n  set(\n    k,\n    v,\n    {\n      ttl = this.ttl,\n      start,\n      noDisposeOnSet = this.noDisposeOnSet,\n      size = 0,\n      sizeCalculation = this.sizeCalculation,\n      noUpdateTTL = this.noUpdateTTL,\n      status,\n    } = {}\n  ) {\n    size = this.requireSize(k, v, size, sizeCalculation)\n    // if the item doesn't fit, don't do anything\n    // NB: maxEntrySize set to maxSize by default\n    if (this.maxEntrySize && size > this.maxEntrySize) {\n      if (status) {\n        status.set = 'miss'\n        status.maxEntrySizeExceeded = true\n      }\n      // have to delete, in case a background fetch is there already.\n      // in non-async cases, this is a no-op\n      this.delete(k)\n      return this\n    }\n    let index = this.size === 0 ? undefined : this.keyMap.get(k)\n    if (index === undefined) {\n      // addition\n      index = this.newIndex()\n      this.keyList[index] = k\n      this.valList[index] = v\n      this.keyMap.set(k, index)\n      this.next[this.tail] = index\n      this.prev[index] = this.tail\n      this.tail = index\n      this.size++\n      this.addItemSize(index, size, status)\n      if (status) {\n        status.set = 'add'\n      }\n      noUpdateTTL = false\n    } else {\n      // update\n      this.moveToTail(index)\n      const oldVal = this.valList[index]\n      if (v !== oldVal) {\n        if (this.isBackgroundFetch(oldVal)) {\n          oldVal.__abortController.abort(new Error('replaced'))\n        } else {\n          if (!noDisposeOnSet) {\n            this.dispose(oldVal, k, 'set')\n            if (this.disposeAfter) {\n              this.disposed.push([oldVal, k, 'set'])\n            }\n          }\n        }\n        this.removeItemSize(index)\n        this.valList[index] = v\n        this.addItemSize(index, size, status)\n        if (status) {\n          status.set = 'replace'\n          const oldValue =\n            oldVal && this.isBackgroundFetch(oldVal)\n              ? oldVal.__staleWhileFetching\n              : oldVal\n          if (oldValue !== undefined) status.oldValue = oldValue\n        }\n      } else if (status) {\n        status.set = 'update'\n      }\n    }\n    if (ttl !== 0 && this.ttl === 0 && !this.ttls) {\n      this.initializeTTLTracking()\n    }\n    if (!noUpdateTTL) {\n      this.setItemTTL(index, ttl, start)\n    }\n    this.statusTTL(status, index)\n    if (this.disposeAfter) {\n      while (this.disposed.length) {\n        this.disposeAfter(...this.disposed.shift())\n      }\n    }\n    return this\n  }\n\n  newIndex() {\n    if (this.size === 0) {\n      return this.tail\n    }\n    if (this.size === this.max && this.max !== 0) {\n      return this.evict(false)\n    }\n    if (this.free.length !== 0) {\n      return this.free.pop()\n    }\n    // initial fill, just keep writing down the list\n    return this.initialFill++\n  }\n\n  pop() {\n    if (this.size) {\n      const val = this.valList[this.head]\n      this.evict(true)\n      return val\n    }\n  }\n\n  evict(free) {\n    const head = this.head\n    const k = this.keyList[head]\n    const v = this.valList[head]\n    if (this.isBackgroundFetch(v)) {\n      v.__abortController.abort(new Error('evicted'))\n    } else {\n      this.dispose(v, k, 'evict')\n      if (this.disposeAfter) {\n        this.disposed.push([v, k, 'evict'])\n      }\n    }\n    this.removeItemSize(head)\n    // if we aren't about to use the index, then null these out\n    if (free) {\n      this.keyList[head] = null\n      this.valList[head] = null\n      this.free.push(head)\n    }\n    this.head = this.next[head]\n    this.keyMap.delete(k)\n    this.size--\n    return head\n  }\n\n  has(k, { updateAgeOnHas = this.updateAgeOnHas, status } = {}) {\n    const index = this.keyMap.get(k)\n    if (index !== undefined) {\n      if (!this.isStale(index)) {\n        if (updateAgeOnHas) {\n          this.updateItemAge(index)\n        }\n        if (status) status.has = 'hit'\n        this.statusTTL(status, index)\n        return true\n      } else if (status) {\n        status.has = 'stale'\n        this.statusTTL(status, index)\n      }\n    } else if (status) {\n      status.has = 'miss'\n    }\n    return false\n  }\n\n  // like get(), but without any LRU updating or TTL expiration\n  peek(k, { allowStale = this.allowStale } = {}) {\n    const index = this.keyMap.get(k)\n    if (index !== undefined && (allowStale || !this.isStale(index))) {\n      const v = this.valList[index]\n      // either stale and allowed, or forcing a refresh of non-stale value\n      return this.isBackgroundFetch(v) ? v.__staleWhileFetching : v\n    }\n  }\n\n  backgroundFetch(k, index, options, context) {\n    const v = index === undefined ? undefined : this.valList[index]\n    if (this.isBackgroundFetch(v)) {\n      return v\n    }\n    const ac = new AC()\n    if (options.signal) {\n      options.signal.addEventListener('abort', () =>\n        ac.abort(options.signal.reason)\n      )\n    }\n    const fetchOpts = {\n      signal: ac.signal,\n      options,\n      context,\n    }\n    const cb = (v, updateCache = false) => {\n      const { aborted } = ac.signal\n      const ignoreAbort = options.ignoreFetchAbort && v !== undefined\n      if (options.status) {\n        if (aborted && !updateCache) {\n          options.status.fetchAborted = true\n          options.status.fetchError = ac.signal.reason\n          if (ignoreAbort) options.status.fetchAbortIgnored = true\n        } else {\n          options.status.fetchResolved = true\n        }\n      }\n      if (aborted && !ignoreAbort && !updateCache) {\n        return fetchFail(ac.signal.reason)\n      }\n      // either we didn't abort, and are still here, or we did, and ignored\n      if (this.valList[index] === p) {\n        if (v === undefined) {\n          if (p.__staleWhileFetching) {\n            this.valList[index] = p.__staleWhileFetching\n          } else {\n            this.delete(k)\n          }\n        } else {\n          if (options.status) options.status.fetchUpdated = true\n          this.set(k, v, fetchOpts.options)\n        }\n      }\n      return v\n    }\n    const eb = er => {\n      if (options.status) {\n        options.status.fetchRejected = true\n        options.status.fetchError = er\n      }\n      return fetchFail(er)\n    }\n    const fetchFail = er => {\n      const { aborted } = ac.signal\n      const allowStaleAborted =\n        aborted && options.allowStaleOnFetchAbort\n      const allowStale =\n        allowStaleAborted || options.allowStaleOnFetchRejection\n      const noDelete = allowStale || options.noDeleteOnFetchRejection\n      if (this.valList[index] === p) {\n        // if we allow stale on fetch rejections, then we need to ensure that\n        // the stale value is not removed from the cache when the fetch fails.\n        const del = !noDelete || p.__staleWhileFetching === undefined\n        if (del) {\n          this.delete(k)\n        } else if (!allowStaleAborted) {\n          // still replace the *promise* with the stale value,\n          // since we are done with the promise at this point.\n          // leave it untouched if we're still waiting for an\n          // aborted background fetch that hasn't yet returned.\n          this.valList[index] = p.__staleWhileFetching\n        }\n      }\n      if (allowStale) {\n        if (options.status && p.__staleWhileFetching !== undefined) {\n          options.status.returnedStale = true\n        }\n        return p.__staleWhileFetching\n      } else if (p.__returned === p) {\n        throw er\n      }\n    }\n    const pcall = (res, rej) => {\n      this.fetchMethod(k, v, fetchOpts).then(v => res(v), rej)\n      // ignored, we go until we finish, regardless.\n      // defer check until we are actually aborting,\n      // so fetchMethod can override.\n      ac.signal.addEventListener('abort', () => {\n        if (\n          !options.ignoreFetchAbort ||\n          options.allowStaleOnFetchAbort\n        ) {\n          res()\n          // when it eventually resolves, update the cache.\n          if (options.allowStaleOnFetchAbort) {\n            res = v => cb(v, true)\n          }\n        }\n      })\n    }\n    if (options.status) options.status.fetchDispatched = true\n    const p = new Promise(pcall).then(cb, eb)\n    p.__abortController = ac\n    p.__staleWhileFetching = v\n    p.__returned = null\n    if (index === undefined) {\n      // internal, don't expose status.\n      this.set(k, p, { ...fetchOpts.options, status: undefined })\n      index = this.keyMap.get(k)\n    } else {\n      this.valList[index] = p\n    }\n    return p\n  }\n\n  isBackgroundFetch(p) {\n    return (\n      p &&\n      typeof p === 'object' &&\n      typeof p.then === 'function' &&\n      Object.prototype.hasOwnProperty.call(\n        p,\n        '__staleWhileFetching'\n      ) &&\n      Object.prototype.hasOwnProperty.call(p, '__returned') &&\n      (p.__returned === p || p.__returned === null)\n    )\n  }\n\n  // this takes the union of get() and set() opts, because it does both\n  async fetch(\n    k,\n    {\n      // get options\n      allowStale = this.allowStale,\n      updateAgeOnGet = this.updateAgeOnGet,\n      noDeleteOnStaleGet = this.noDeleteOnStaleGet,\n      // set options\n      ttl = this.ttl,\n      noDisposeOnSet = this.noDisposeOnSet,\n      size = 0,\n      sizeCalculation = this.sizeCalculation,\n      noUpdateTTL = this.noUpdateTTL,\n      // fetch exclusive options\n      noDeleteOnFetchRejection = this.noDeleteOnFetchRejection,\n      allowStaleOnFetchRejection = this.allowStaleOnFetchRejection,\n      ignoreFetchAbort = this.ignoreFetchAbort,\n      allowStaleOnFetchAbort = this.allowStaleOnFetchAbort,\n      fetchContext = this.fetchContext,\n      forceRefresh = false,\n      status,\n      signal,\n    } = {}\n  ) {\n    if (!this.fetchMethod) {\n      if (status) status.fetch = 'get'\n      return this.get(k, {\n        allowStale,\n        updateAgeOnGet,\n        noDeleteOnStaleGet,\n        status,\n      })\n    }\n\n    const options = {\n      allowStale,\n      updateAgeOnGet,\n      noDeleteOnStaleGet,\n      ttl,\n      noDisposeOnSet,\n      size,\n      sizeCalculation,\n      noUpdateTTL,\n      noDeleteOnFetchRejection,\n      allowStaleOnFetchRejection,\n      allowStaleOnFetchAbort,\n      ignoreFetchAbort,\n      status,\n      signal,\n    }\n\n    let index = this.keyMap.get(k)\n    if (index === undefined) {\n      if (status) status.fetch = 'miss'\n      const p = this.backgroundFetch(k, index, options, fetchContext)\n      return (p.__returned = p)\n    } else {\n      // in cache, maybe already fetching\n      const v = this.valList[index]\n      if (this.isBackgroundFetch(v)) {\n        const stale =\n          allowStale && v.__staleWhileFetching !== undefined\n        if (status) {\n          status.fetch = 'inflight'\n          if (stale) status.returnedStale = true\n        }\n        return stale ? v.__staleWhileFetching : (v.__returned = v)\n      }\n\n      // if we force a refresh, that means do NOT serve the cached value,\n      // unless we are already in the process of refreshing the cache.\n      const isStale = this.isStale(index)\n      if (!forceRefresh && !isStale) {\n        if (status) status.fetch = 'hit'\n        this.moveToTail(index)\n        if (updateAgeOnGet) {\n          this.updateItemAge(index)\n        }\n        this.statusTTL(status, index)\n        return v\n      }\n\n      // ok, it is stale or a forced refresh, and not already fetching.\n      // refresh the cache.\n      const p = this.backgroundFetch(k, index, options, fetchContext)\n      const hasStale = p.__staleWhileFetching !== undefined\n      const staleVal = hasStale && allowStale\n      if (status) {\n        status.fetch = hasStale && isStale ? 'stale' : 'refresh'\n        if (staleVal && isStale) status.returnedStale = true\n      }\n      return staleVal ? p.__staleWhileFetching : (p.__returned = p)\n    }\n  }\n\n  get(\n    k,\n    {\n      allowStale = this.allowStale,\n      updateAgeOnGet = this.updateAgeOnGet,\n      noDeleteOnStaleGet = this.noDeleteOnStaleGet,\n      status,\n    } = {}\n  ) {\n    const index = this.keyMap.get(k)\n    if (index !== undefined) {\n      const value = this.valList[index]\n      const fetching = this.isBackgroundFetch(value)\n      this.statusTTL(status, index)\n      if (this.isStale(index)) {\n        if (status) status.get = 'stale'\n        // delete only if not an in-flight background fetch\n        if (!fetching) {\n          if (!noDeleteOnStaleGet) {\n            this.delete(k)\n          }\n          if (status) status.returnedStale = allowStale\n          return allowStale ? value : undefined\n        } else {\n          if (status) {\n            status.returnedStale =\n              allowStale && value.__staleWhileFetching !== undefined\n          }\n          return allowStale ? value.__staleWhileFetching : undefined\n        }\n      } else {\n        if (status) status.get = 'hit'\n        // if we're currently fetching it, we don't actually have it yet\n        // it's not stale, which means this isn't a staleWhileRefetching.\n        // If it's not stale, and fetching, AND has a __staleWhileFetching\n        // value, then that means the user fetched with {forceRefresh:true},\n        // so it's safe to return that value.\n        if (fetching) {\n          return value.__staleWhileFetching\n        }\n        this.moveToTail(index)\n        if (updateAgeOnGet) {\n          this.updateItemAge(index)\n        }\n        return value\n      }\n    } else if (status) {\n      status.get = 'miss'\n    }\n  }\n\n  connect(p, n) {\n    this.prev[n] = p\n    this.next[p] = n\n  }\n\n  moveToTail(index) {\n    // if tail already, nothing to do\n    // if head, move head to next[index]\n    // else\n    //   move next[prev[index]] to next[index] (head has no prev)\n    //   move prev[next[index]] to prev[index]\n    // prev[index] = tail\n    // next[tail] = index\n    // tail = index\n    if (index !== this.tail) {\n      if (index === this.head) {\n        this.head = this.next[index]\n      } else {\n        this.connect(this.prev[index], this.next[index])\n      }\n      this.connect(this.tail, index)\n      this.tail = index\n    }\n  }\n\n  get del() {\n    deprecatedMethod('del', 'delete')\n    return this.delete\n  }\n\n  delete(k) {\n    let deleted = false\n    if (this.size !== 0) {\n      const index = this.keyMap.get(k)\n      if (index !== undefined) {\n        deleted = true\n        if (this.size === 1) {\n          this.clear()\n        } else {\n          this.removeItemSize(index)\n          const v = this.valList[index]\n          if (this.isBackgroundFetch(v)) {\n            v.__abortController.abort(new Error('deleted'))\n          } else {\n            this.dispose(v, k, 'delete')\n            if (this.disposeAfter) {\n              this.disposed.push([v, k, 'delete'])\n            }\n          }\n          this.keyMap.delete(k)\n          this.keyList[index] = null\n          this.valList[index] = null\n          if (index === this.tail) {\n            this.tail = this.prev[index]\n          } else if (index === this.head) {\n            this.head = this.next[index]\n          } else {\n            this.next[this.prev[index]] = this.next[index]\n            this.prev[this.next[index]] = this.prev[index]\n          }\n          this.size--\n          this.free.push(index)\n        }\n      }\n    }\n    if (this.disposed) {\n      while (this.disposed.length) {\n        this.disposeAfter(...this.disposed.shift())\n      }\n    }\n    return deleted\n  }\n\n  clear() {\n    for (const index of this.rindexes({ allowStale: true })) {\n      const v = this.valList[index]\n      if (this.isBackgroundFetch(v)) {\n        v.__abortController.abort(new Error('deleted'))\n      } else {\n        const k = this.keyList[index]\n        this.dispose(v, k, 'delete')\n        if (this.disposeAfter) {\n          this.disposed.push([v, k, 'delete'])\n        }\n      }\n    }\n\n    this.keyMap.clear()\n    this.valList.fill(null)\n    this.keyList.fill(null)\n    if (this.ttls) {\n      this.ttls.fill(0)\n      this.starts.fill(0)\n    }\n    if (this.sizes) {\n      this.sizes.fill(0)\n    }\n    this.head = 0\n    this.tail = 0\n    this.initialFill = 1\n    this.free.length = 0\n    this.calculatedSize = 0\n    this.size = 0\n    if (this.disposed) {\n      while (this.disposed.length) {\n        this.disposeAfter(...this.disposed.shift())\n      }\n    }\n  }\n\n  get reset() {\n    deprecatedMethod('reset', 'clear')\n    return this.clear\n  }\n\n  get length() {\n    deprecatedProperty('length', 'size')\n    return this.size\n  }\n\n  static get AbortController() {\n    return AC\n  }\n  static get AbortSignal() {\n    return AS\n  }\n}\n\nmodule.exports = LRUCache\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 3540, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}